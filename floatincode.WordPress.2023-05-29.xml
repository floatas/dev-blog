<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

	<!-- generator="WordPress/6.2.2" created="2023-05-29 13:52" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>Float In Code</title>
	<link>https://floatincode.net</link>
	<description></description>
	<pubDate>Mon, 29 May 2023 13:52:28 +0000</pubDate>
	<language>en-US</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>https://floatincode.net</wp:base_site_url>
	<wp:base_blog_url>https://floatincode.net</wp:base_blog_url>

		<wp:author><wp:author_id>1</wp:author_id><wp:author_login><![CDATA[Floatas]]></wp:author_login><wp:author_email><![CDATA[floatas@outlook.com]]></wp:author_email><wp:author_display_name><![CDATA[Floatas]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>

		<wp:category>
		<wp:term_id>2</wp:term_id>
		<wp:category_nicename><![CDATA[software-development]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Software Development]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>1</wp:term_id>
		<wp:category_nicename><![CDATA[uncategorized]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name>
	</wp:category>
			<wp:tag>
		<wp:term_id>22</wp:term_id>
		<wp:tag_slug><![CDATA[net]]></wp:tag_slug>
		<wp:tag_name><![CDATA[.NET]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>9</wp:term_id>
		<wp:tag_slug><![CDATA[api]]></wp:tag_slug>
		<wp:tag_name><![CDATA[API]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>16</wp:term_id>
		<wp:tag_slug><![CDATA[bash]]></wp:tag_slug>
		<wp:tag_name><![CDATA[bash]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>31</wp:term_id>
		<wp:tag_slug><![CDATA[bing]]></wp:tag_slug>
		<wp:tag_name><![CDATA[bing]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>14</wp:term_id>
		<wp:tag_slug><![CDATA[book-review]]></wp:tag_slug>
		<wp:tag_name><![CDATA[book-review]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>3</wp:term_id>
		<wp:tag_slug><![CDATA[c-sharp]]></wp:tag_slug>
		<wp:tag_name><![CDATA[C#]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>21</wp:term_id>
		<wp:tag_slug><![CDATA[c]]></wp:tag_slug>
		<wp:tag_name><![CDATA[c£]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>20</wp:term_id>
		<wp:tag_slug><![CDATA[code-generation]]></wp:tag_slug>
		<wp:tag_name><![CDATA[code-generation]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>23</wp:term_id>
		<wp:tag_slug><![CDATA[continuous-deployment]]></wp:tag_slug>
		<wp:tag_name><![CDATA[continuous-deployment]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>6</wp:term_id>
		<wp:tag_slug><![CDATA[database]]></wp:tag_slug>
		<wp:tag_name><![CDATA[database]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>12</wp:term_id>
		<wp:tag_slug><![CDATA[db-first]]></wp:tag_slug>
		<wp:tag_name><![CDATA[DB-First]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>33</wp:term_id>
		<wp:tag_slug><![CDATA[debugging]]></wp:tag_slug>
		<wp:tag_name><![CDATA[debugging]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>18</wp:term_id>
		<wp:tag_slug><![CDATA[di]]></wp:tag_slug>
		<wp:tag_name><![CDATA[DI]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>5</wp:term_id>
		<wp:tag_slug><![CDATA[docker]]></wp:tag_slug>
		<wp:tag_name><![CDATA[docker]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>11</wp:term_id>
		<wp:tag_slug><![CDATA[entityframework]]></wp:tag_slug>
		<wp:tag_name><![CDATA[EntityFramework]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>7</wp:term_id>
		<wp:tag_slug><![CDATA[flyway]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Flyway]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>29</wp:term_id>
		<wp:tag_slug><![CDATA[google]]></wp:tag_slug>
		<wp:tag_name><![CDATA[google]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>27</wp:term_id>
		<wp:tag_slug><![CDATA[map]]></wp:tag_slug>
		<wp:tag_name><![CDATA[map]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>30</wp:term_id>
		<wp:tag_slug><![CDATA[mapbox]]></wp:tag_slug>
		<wp:tag_name><![CDATA[mapbox]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>19</wp:term_id>
		<wp:tag_slug><![CDATA[mapper]]></wp:tag_slug>
		<wp:tag_name><![CDATA[mapper]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>10</wp:term_id>
		<wp:tag_slug><![CDATA[moq]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Moq]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>8</wp:term_id>
		<wp:tag_slug><![CDATA[postgresql]]></wp:tag_slug>
		<wp:tag_name><![CDATA[PostgreSQL]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>26</wp:term_id>
		<wp:tag_slug><![CDATA[research]]></wp:tag_slug>
		<wp:tag_name><![CDATA[research]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>28</wp:term_id>
		<wp:tag_slug><![CDATA[snap-to-road]]></wp:tag_slug>
		<wp:tag_name><![CDATA[snap-to-road]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>4</wp:term_id>
		<wp:tag_slug><![CDATA[testing]]></wp:tag_slug>
		<wp:tag_name><![CDATA[testing]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>34</wp:term_id>
		<wp:tag_slug><![CDATA[thought-process]]></wp:tag_slug>
		<wp:tag_name><![CDATA[thought-process]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>17</wp:term_id>
		<wp:tag_slug><![CDATA[tips]]></wp:tag_slug>
		<wp:tag_name><![CDATA[tips]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>25</wp:term_id>
		<wp:tag_slug><![CDATA[transaction]]></wp:tag_slug>
		<wp:tag_name><![CDATA[transaction]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>13</wp:term_id>
		<wp:tag_slug><![CDATA[validation]]></wp:tag_slug>
		<wp:tag_name><![CDATA[validation]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>24</wp:term_id>
		<wp:tag_slug><![CDATA[versioning]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Versioning]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>32</wp:term_id>
		<wp:tag_slug><![CDATA[witch-hunt]]></wp:tag_slug>
		<wp:tag_name><![CDATA[witch-hunt]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>15</wp:term_id>
		<wp:tag_slug><![CDATA[wsl-2]]></wp:tag_slug>
		<wp:tag_name><![CDATA[wsl-2]]></wp:tag_name>
	</wp:tag>
			<wp:term>
		<wp:term_id>22</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[net]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[.NET]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>9</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[api]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[API]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>35</wp:term_id>
		<wp:term_taxonomy><![CDATA[wp_theme]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[author]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[author]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>16</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[bash]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[bash]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>31</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[bing]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[bing]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>14</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[book-review]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[book-review]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>3</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[c-sharp]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[C#]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>21</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[c]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[c£]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>20</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[code-generation]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[code-generation]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>23</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[continuous-deployment]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[continuous-deployment]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>6</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[database]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[database]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>12</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[db-first]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[DB-First]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>33</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[debugging]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[debugging]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>18</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[di]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[DI]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>5</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[docker]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[docker]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>11</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[entityframework]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[EntityFramework]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>7</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[flyway]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Flyway]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>29</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[google]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[google]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>27</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[map]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[map]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>30</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[mapbox]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[mapbox]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>19</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[mapper]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[mapper]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>10</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[moq]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Moq]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>8</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[postgresql]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[PostgreSQL]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>26</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[research]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[research]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>28</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[snap-to-road]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[snap-to-road]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>2</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[software-development]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Software Development]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>4</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[testing]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[testing]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>34</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[thought-process]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[thought-process]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>17</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[tips]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[tips]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>25</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[transaction]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[transaction]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>1</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[uncategorized]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Uncategorized]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>13</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[validation]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[validation]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>24</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[versioning]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Versioning]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>32</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[witch-hunt]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[witch-hunt]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>15</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[wsl-2]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[wsl-2]]></wp:term_name>
	</wp:term>
		
	<generator>https://wordpress.org/?v=6.2.2</generator>

		<item>
		<title><![CDATA[image]]></title>
		<link>https://floatincode.net/2021/03/06/api-integration-testing-database/image/</link>
		<pubDate>Sat, 06 Mar 2021 09:36:11 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/wp-content/uploads/2021/03/image.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>40</wp:post_id>
		<wp:post_date><![CDATA[2021-03-06 09:36:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-06 09:36:11]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-03-06 09:36:11]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-03-06 09:36:11]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>24</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://floatincode.net/wp-content/uploads/2021/03/image.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/03/image.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1572;s:6:"height";i:249;s:4:"file";s:17:"2021/03/image.png";s:5:"sizes";a:6:{s:6:"medium";a:4:{s:4:"file";s:16:"image-300x48.png";s:5:"width";i:300;s:6:"height";i:48;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:18:"image-1024x162.png";s:5:"width";i:1024;s:6:"height";i:162;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:17:"image-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:17:"image-768x122.png";s:5:"width";i:768;s:6:"height";i:122;s:9:"mime-type";s:9:"image/png";}s:9:"1536x1536";a:4:{s:4:"file";s:18:"image-1536x243.png";s:5:"width";i:1536;s:6:"height";i:243;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:18:"image-1568x248.png";s:5:"width";i:1568;s:6:"height";i:248;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[NodaTime]]></title>
		<link>https://floatincode.net/?attachment_id=161</link>
		<pubDate>Wed, 12 May 2021 05:17:03 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/wp-content/uploads/2021/05/NodaTime.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>161</wp:post_id>
		<wp:post_date><![CDATA[2021-05-12 05:17:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-05-12 05:17:03]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-05-12 05:17:03]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-05-12 05:17:03]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[nodatime]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>77</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://floatincode.net/wp-content/uploads/2021/05/NodaTime.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/05/NodaTime.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:660;s:6:"height";i:421;s:4:"file";s:20:"2021/05/NodaTime.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:20:"NodaTime-300x191.png";s:5:"width";i:300;s:6:"height";i:191;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:20:"NodaTime-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[JsonAndDataAnnotationPropertyValidation]]></title>
		<link>https://floatincode.net/2021/06/26/asp-net-core-required-property-validation/jsonanddataannotationpropertyvalidation/</link>
		<pubDate>Sat, 26 Jun 2021 12:42:56 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/wp-content/uploads/2021/06/JsonAndDataAnnotationPropertyValidation.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>191</wp:post_id>
		<wp:post_date><![CDATA[2021-06-26 12:42:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-06-26 12:42:56]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-06-26 12:42:56]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-06-26 12:42:56]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[jsonanddataannotationpropertyvalidation]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>173</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://floatincode.net/wp-content/uploads/2021/06/JsonAndDataAnnotationPropertyValidation.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/06/JsonAndDataAnnotationPropertyValidation.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:657;s:6:"height";i:302;s:4:"file";s:51:"2021/06/JsonAndDataAnnotationPropertyValidation.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:51:"JsonAndDataAnnotationPropertyValidation-300x138.png";s:5:"width";i:300;s:6:"height";i:138;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:51:"JsonAndDataAnnotationPropertyValidation-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[image]]></title>
		<link>https://floatincode.net/2021/06/26/asp-net-core-required-property-validation/image-2/</link>
		<pubDate>Sat, 26 Jun 2021 12:56:10 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/wp-content/uploads/2021/06/image.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>193</wp:post_id>
		<wp:post_date><![CDATA[2021-06-26 12:56:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-06-26 12:56:10]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-06-26 12:56:10]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-06-26 12:56:10]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>173</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://floatincode.net/wp-content/uploads/2021/06/image.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/06/image.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:779;s:6:"height";i:1119;s:4:"file";s:17:"2021/06/image.png";s:5:"sizes";a:4:{s:6:"medium";a:4:{s:4:"file";s:17:"image-209x300.png";s:5:"width";i:209;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:18:"image-713x1024.png";s:5:"width";i:713;s:6:"height";i:1024;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:17:"image-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:18:"image-768x1103.png";s:5:"width";i:768;s:6:"height";i:1103;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[image-1]]></title>
		<link>https://floatincode.net/2021/06/26/asp-net-core-required-property-validation/image-1/</link>
		<pubDate>Sat, 26 Jun 2021 12:57:36 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/wp-content/uploads/2021/06/image-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>194</wp:post_id>
		<wp:post_date><![CDATA[2021-06-26 12:57:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-06-26 12:57:36]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-06-26 12:57:36]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-06-26 12:57:36]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>173</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://floatincode.net/wp-content/uploads/2021/06/image-1.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/06/image-1.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:688;s:6:"height";i:1220;s:4:"file";s:19:"2021/06/image-1.png";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:19:"image-1-169x300.png";s:5:"width";i:169;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:20:"image-1-577x1024.png";s:5:"width";i:577;s:6:"height";i:1024;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:19:"image-1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[image-2]]></title>
		<link>https://floatincode.net/2021/06/26/asp-net-core-required-property-validation/image-2-2/</link>
		<pubDate>Sat, 26 Jun 2021 12:59:30 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/wp-content/uploads/2021/06/image-2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>195</wp:post_id>
		<wp:post_date><![CDATA[2021-06-26 12:59:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-06-26 12:59:30]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-06-26 12:59:30]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-06-26 12:59:30]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-2-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>173</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://floatincode.net/wp-content/uploads/2021/06/image-2.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/06/image-2.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:631;s:6:"height";i:1224;s:4:"file";s:19:"2021/06/image-2.png";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:19:"image-2-155x300.png";s:5:"width";i:155;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:20:"image-2-528x1024.png";s:5:"width";i:528;s:6:"height";i:1024;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:19:"image-2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[image-3]]></title>
		<link>https://floatincode.net/2021/06/26/asp-net-core-required-property-validation/image-3/</link>
		<pubDate>Sat, 26 Jun 2021 13:00:22 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/wp-content/uploads/2021/06/image-3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>196</wp:post_id>
		<wp:post_date><![CDATA[2021-06-26 13:00:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-06-26 13:00:22]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-06-26 13:00:22]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-06-26 13:00:22]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>173</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://floatincode.net/wp-content/uploads/2021/06/image-3.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/06/image-3.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:599;s:6:"height";i:1219;s:4:"file";s:19:"2021/06/image-3.png";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:19:"image-3-147x300.png";s:5:"width";i:147;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:20:"image-3-503x1024.png";s:5:"width";i:503;s:6:"height";i:1024;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:19:"image-3-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[image-4]]></title>
		<link>https://floatincode.net/2021/07/12/pro-windows-subsystem-for-linux-wsl-book-review/image-4/</link>
		<pubDate>Sat, 26 Jun 2021 17:15:18 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/wp-content/uploads/2021/06/image-4.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>201</wp:post_id>
		<wp:post_date><![CDATA[2021-06-26 17:15:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-06-26 17:15:18]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-06-26 17:15:18]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-06-26 17:15:18]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-4]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>200</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://floatincode.net/wp-content/uploads/2021/06/image-4.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/06/image-4.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:317;s:6:"height";i:25;s:4:"file";s:19:"2021/06/image-4.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:18:"image-4-300x24.png";s:5:"width";i:300;s:6:"height";i:24;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:18:"image-4-150x25.png";s:5:"width";i:150;s:6:"height";i:25;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[image-5]]></title>
		<link>https://floatincode.net/2021/07/12/pro-windows-subsystem-for-linux-wsl-book-review/image-5/</link>
		<pubDate>Sat, 26 Jun 2021 17:20:49 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/wp-content/uploads/2021/06/image-5.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>202</wp:post_id>
		<wp:post_date><![CDATA[2021-06-26 17:20:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-06-26 17:20:49]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-06-26 17:20:49]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-06-26 17:20:49]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-5]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>200</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://floatincode.net/wp-content/uploads/2021/06/image-5.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/06/image-5.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:306;s:6:"height";i:25;s:4:"file";s:19:"2021/06/image-5.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:18:"image-5-300x25.png";s:5:"width";i:300;s:6:"height";i:25;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:18:"image-5-150x25.png";s:5:"width";i:150;s:6:"height";i:25;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[image-6]]></title>
		<link>https://floatincode.net/2021/07/12/pro-windows-subsystem-for-linux-wsl-book-review/image-6/</link>
		<pubDate>Sat, 26 Jun 2021 17:21:54 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/wp-content/uploads/2021/06/image-6.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>203</wp:post_id>
		<wp:post_date><![CDATA[2021-06-26 17:21:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-06-26 17:21:54]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-06-26 17:21:54]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-06-26 17:21:54]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-6]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>200</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://floatincode.net/wp-content/uploads/2021/06/image-6.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/06/image-6.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:449;s:6:"height";i:25;s:4:"file";s:19:"2021/06/image-6.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:18:"image-6-300x17.png";s:5:"width";i:300;s:6:"height";i:17;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:18:"image-6-150x25.png";s:5:"width";i:150;s:6:"height";i:25;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[image-7]]></title>
		<link>https://floatincode.net/2021/07/12/pro-windows-subsystem-for-linux-wsl-book-review/image-7/</link>
		<pubDate>Sat, 26 Jun 2021 17:22:18 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/wp-content/uploads/2021/06/image-7.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>204</wp:post_id>
		<wp:post_date><![CDATA[2021-06-26 17:22:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-06-26 17:22:18]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-06-26 17:22:18]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-06-26 17:22:18]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-7]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>200</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://floatincode.net/wp-content/uploads/2021/06/image-7.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/06/image-7.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:683;s:6:"height";i:25;s:4:"file";s:19:"2021/06/image-7.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:18:"image-7-300x11.png";s:5:"width";i:300;s:6:"height";i:11;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:18:"image-7-150x25.png";s:5:"width";i:150;s:6:"height";i:25;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[image-8]]></title>
		<link>https://floatincode.net/2021/07/12/pro-windows-subsystem-for-linux-wsl-book-review/image-8/</link>
		<pubDate>Sun, 27 Jun 2021 15:53:27 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/wp-content/uploads/2021/06/image-8.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>209</wp:post_id>
		<wp:post_date><![CDATA[2021-06-27 15:53:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-06-27 15:53:27]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-06-27 15:53:27]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-06-27 15:53:27]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-8]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>200</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://floatincode.net/wp-content/uploads/2021/06/image-8.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/06/image-8.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:918;s:6:"height";i:634;s:4:"file";s:19:"2021/06/image-8.png";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:19:"image-8-300x207.png";s:5:"width";i:300;s:6:"height";i:207;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:19:"image-8-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:19:"image-8-768x530.png";s:5:"width";i:768;s:6:"height";i:530;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[image-9]]></title>
		<link>https://floatincode.net/2021/07/12/pro-windows-subsystem-for-linux-wsl-book-review/image-9/</link>
		<pubDate>Sun, 27 Jun 2021 16:07:44 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/wp-content/uploads/2021/06/image-9.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>211</wp:post_id>
		<wp:post_date><![CDATA[2021-06-27 16:07:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-06-27 16:07:44]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-06-27 16:07:44]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-06-27 16:07:44]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-9]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>200</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://floatincode.net/wp-content/uploads/2021/06/image-9.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/06/image-9.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1063;s:6:"height";i:112;s:4:"file";s:19:"2021/06/image-9.png";s:5:"sizes";a:4:{s:6:"medium";a:4:{s:4:"file";s:18:"image-9-300x32.png";s:5:"width";i:300;s:6:"height";i:32;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:20:"image-9-1024x108.png";s:5:"width";i:1024;s:6:"height";i:108;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:19:"image-9-150x112.png";s:5:"width";i:150;s:6:"height";i:112;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:18:"image-9-768x81.png";s:5:"width";i:768;s:6:"height";i:81;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[image-10]]></title>
		<link>https://floatincode.net/2021/07/12/pro-windows-subsystem-for-linux-wsl-book-review/image-10/</link>
		<pubDate>Sun, 27 Jun 2021 16:11:13 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/wp-content/uploads/2021/06/image-10.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>213</wp:post_id>
		<wp:post_date><![CDATA[2021-06-27 16:11:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-06-27 16:11:13]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-06-27 16:11:13]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-06-27 16:11:13]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-10]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>200</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://floatincode.net/wp-content/uploads/2021/06/image-10.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/06/image-10.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:501;s:6:"height";i:397;s:4:"file";s:20:"2021/06/image-10.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:20:"image-10-300x238.png";s:5:"width";i:300;s:6:"height";i:238;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:20:"image-10-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[ProWindowsSubsystemForLinuxWSLCover]]></title>
		<link>https://floatincode.net/2021/07/12/pro-windows-subsystem-for-linux-wsl-book-review/prowindowssubsystemforlinuxwslcover/</link>
		<pubDate>Tue, 29 Jun 2021 03:09:53 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/wp-content/uploads/2021/06/ProWindowsSubsystemForLinuxWSLCover.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>219</wp:post_id>
		<wp:post_date><![CDATA[2021-06-29 03:09:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-06-29 03:09:53]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-06-29 03:09:53]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-06-29 03:09:53]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[prowindowssubsystemforlinuxwslcover]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>200</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://floatincode.net/wp-content/uploads/2021/06/ProWindowsSubsystemForLinuxWSLCover.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/06/ProWindowsSubsystemForLinuxWSLCover.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:924;s:6:"height";i:1234;s:4:"file";s:47:"2021/06/ProWindowsSubsystemForLinuxWSLCover.png";s:5:"sizes";a:4:{s:6:"medium";a:4:{s:4:"file";s:47:"ProWindowsSubsystemForLinuxWSLCover-225x300.png";s:5:"width";i:225;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:48:"ProWindowsSubsystemForLinuxWSLCover-767x1024.png";s:5:"width";i:767;s:6:"height";i:1024;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:47:"ProWindowsSubsystemForLinuxWSLCover-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:48:"ProWindowsSubsystemForLinuxWSLCover-768x1026.png";s:5:"width";i:768;s:6:"height";i:1026;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[image-11]]></title>
		<link>https://floatincode.net/2021/07/12/pro-windows-subsystem-for-linux-wsl-book-review/image-11/</link>
		<pubDate>Tue, 29 Jun 2021 04:06:22 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/wp-content/uploads/2021/06/image-11.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>239</wp:post_id>
		<wp:post_date><![CDATA[2021-06-29 04:06:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-06-29 04:06:22]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-06-29 04:06:22]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-06-29 04:06:22]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-11]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>200</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://floatincode.net/wp-content/uploads/2021/06/image-11.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/06/image-11.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:507;s:6:"height";i:401;s:4:"file";s:20:"2021/06/image-11.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:20:"image-11-300x237.png";s:5:"width";i:300;s:6:"height";i:237;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:20:"image-11-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[image-12]]></title>
		<link>https://floatincode.net/2021/07/12/pro-windows-subsystem-for-linux-wsl-book-review/image-12/</link>
		<pubDate>Tue, 29 Jun 2021 04:06:37 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/wp-content/uploads/2021/06/image-12.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>240</wp:post_id>
		<wp:post_date><![CDATA[2021-06-29 04:06:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-06-29 04:06:37]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-06-29 04:06:37]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-06-29 04:06:37]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-12]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>200</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://floatincode.net/wp-content/uploads/2021/06/image-12.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/06/image-12.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:504;s:6:"height";i:396;s:4:"file";s:20:"2021/06/image-12.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:20:"image-12-300x236.png";s:5:"width";i:300;s:6:"height";i:236;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:20:"image-12-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[image-13]]></title>
		<link>https://floatincode.net/2021/07/12/pro-windows-subsystem-for-linux-wsl-book-review/image-13/</link>
		<pubDate>Tue, 29 Jun 2021 04:11:33 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/wp-content/uploads/2021/06/image-13.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>241</wp:post_id>
		<wp:post_date><![CDATA[2021-06-29 04:11:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-06-29 04:11:33]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-06-29 04:11:33]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-06-29 04:11:33]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-13]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>200</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://floatincode.net/wp-content/uploads/2021/06/image-13.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/06/image-13.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:504;s:6:"height";i:468;s:4:"file";s:20:"2021/06/image-13.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:20:"image-13-300x279.png";s:5:"width";i:300;s:6:"height";i:279;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:20:"image-13-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[image-14]]></title>
		<link>https://floatincode.net/2021/07/12/pro-windows-subsystem-for-linux-wsl-book-review/image-14/</link>
		<pubDate>Tue, 29 Jun 2021 04:15:38 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/wp-content/uploads/2021/06/image-14.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>243</wp:post_id>
		<wp:post_date><![CDATA[2021-06-29 04:15:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-06-29 04:15:38]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-06-29 04:15:38]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-06-29 04:15:38]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-14]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>200</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://floatincode.net/wp-content/uploads/2021/06/image-14.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/06/image-14.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1449;s:6:"height";i:760;s:4:"file";s:20:"2021/06/image-14.png";s:5:"sizes";a:4:{s:6:"medium";a:4:{s:4:"file";s:20:"image-14-300x157.png";s:5:"width";i:300;s:6:"height";i:157;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:21:"image-14-1024x537.png";s:5:"width";i:1024;s:6:"height";i:537;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:20:"image-14-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:20:"image-14-768x403.png";s:5:"width";i:768;s:6:"height";i:403;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[image]]></title>
		<link>https://floatincode.net/2021/07/26/mapster-generate-dto-async-after-map-actions-dependency-injection/image-15/</link>
		<pubDate>Fri, 16 Jul 2021 04:33:07 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/wp-content/uploads/2021/07/image.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>292</wp:post_id>
		<wp:post_date><![CDATA[2021-07-16 04:33:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-07-16 04:33:07]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-07-16 04:33:07]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-07-16 04:33:07]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-15]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>261</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://floatincode.net/wp-content/uploads/2021/07/image.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/07/image.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:961;s:6:"height";i:403;s:4:"file";s:17:"2021/07/image.png";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:17:"image-300x126.png";s:5:"width";i:300;s:6:"height";i:126;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:17:"image-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:17:"image-768x322.png";s:5:"width";i:768;s:6:"height";i:322;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[image-1]]></title>
		<link>https://floatincode.net/2021/07/26/mapster-generate-dto-async-after-map-actions-dependency-injection/image-1-2/</link>
		<pubDate>Fri, 16 Jul 2021 04:33:27 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/wp-content/uploads/2021/07/image-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>293</wp:post_id>
		<wp:post_date><![CDATA[2021-07-16 04:33:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-07-16 04:33:27]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-07-16 04:33:27]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-07-16 04:33:27]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-1-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>261</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://floatincode.net/wp-content/uploads/2021/07/image-1.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/07/image-1.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:959;s:6:"height";i:400;s:4:"file";s:19:"2021/07/image-1.png";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:19:"image-1-300x125.png";s:5:"width";i:300;s:6:"height";i:125;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:19:"image-1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:19:"image-1-768x320.png";s:5:"width";i:768;s:6:"height";i:320;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[image]]></title>
		<link>https://floatincode.net/2021/08/23/custom-api-version-selector/image-16/</link>
		<pubDate>Fri, 13 Aug 2021 10:16:35 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/wp-content/uploads/2021/08/image.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>316</wp:post_id>
		<wp:post_date><![CDATA[2021-08-13 10:16:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-08-13 10:16:35]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-08-13 10:16:35]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-08-13 10:16:35]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-16]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>73</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://floatincode.net/wp-content/uploads/2021/08/image.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/08/image.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:583;s:6:"height";i:388;s:4:"file";s:17:"2021/08/image.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:17:"image-300x200.png";s:5:"width";i:300;s:6:"height";i:200;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:17:"image-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[image-1]]></title>
		<link>https://floatincode.net/2021/08/23/custom-api-version-selector/image-1-3/</link>
		<pubDate>Fri, 13 Aug 2021 10:17:34 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/wp-content/uploads/2021/08/image-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>317</wp:post_id>
		<wp:post_date><![CDATA[2021-08-13 10:17:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-08-13 10:17:34]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-08-13 10:17:34]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-08-13 10:17:34]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-1-3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>73</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://floatincode.net/wp-content/uploads/2021/08/image-1.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/08/image-1.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:739;s:6:"height";i:374;s:4:"file";s:19:"2021/08/image-1.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:19:"image-1-300x152.png";s:5:"width";i:300;s:6:"height";i:152;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:19:"image-1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[image-2]]></title>
		<link>https://floatincode.net/2021/08/23/custom-api-version-selector/image-2-3/</link>
		<pubDate>Fri, 13 Aug 2021 10:19:18 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/wp-content/uploads/2021/08/image-2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>320</wp:post_id>
		<wp:post_date><![CDATA[2021-08-13 10:19:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-08-13 10:19:18]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-08-13 10:19:18]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-08-13 10:19:18]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-2-3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>73</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://floatincode.net/wp-content/uploads/2021/08/image-2.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/08/image-2.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:773;s:6:"height";i:387;s:4:"file";s:19:"2021/08/image-2.png";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:19:"image-2-300x150.png";s:5:"width";i:300;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:19:"image-2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:19:"image-2-768x384.png";s:5:"width";i:768;s:6:"height";i:384;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[ASP.NET-Core-5-Secure-Coding-Cookbook]]></title>
		<link>https://floatincode.net/?attachment_id=330</link>
		<pubDate>Wed, 18 Aug 2021 06:55:48 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/wp-content/uploads/2021/08/ASP.NET-Core-5-Secure-Coding-Cookbook.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>330</wp:post_id>
		<wp:post_date><![CDATA[2021-08-18 06:55:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-08-18 06:55:48]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-08-18 06:55:48]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-08-18 06:55:48]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[asp-net-core-5-secure-coding-cookbook]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>329</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://floatincode.net/wp-content/uploads/2021/08/ASP.NET-Core-5-Secure-Coding-Cookbook.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/08/ASP.NET-Core-5-Secure-Coding-Cookbook.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:405;s:6:"height";i:500;s:4:"file";s:49:"2021/08/ASP.NET-Core-5-Secure-Coding-Cookbook.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:49:"ASP.NET-Core-5-Secure-Coding-Cookbook-243x300.jpg";s:5:"width";i:243;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:49:"ASP.NET-Core-5-Secure-Coding-Cookbook-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[The-Programmers-Brain]]></title>
		<link>https://floatincode.net/?attachment_id=332</link>
		<pubDate>Wed, 18 Aug 2021 06:59:29 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/wp-content/uploads/2021/08/The-Programmers-Brain.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>332</wp:post_id>
		<wp:post_date><![CDATA[2021-08-18 06:59:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-08-18 06:59:29]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-08-18 06:59:29]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-08-18 06:59:29]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[the-programmers-brain]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>329</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://floatincode.net/wp-content/uploads/2021/08/The-Programmers-Brain.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/08/The-Programmers-Brain.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:2213;s:6:"height";i:2775;s:4:"file";s:33:"2021/08/The-Programmers-Brain.png";s:5:"sizes";a:6:{s:6:"medium";a:4:{s:4:"file";s:33:"The-Programmers-Brain-239x300.png";s:5:"width";i:239;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:34:"The-Programmers-Brain-817x1024.png";s:5:"width";i:817;s:6:"height";i:1024;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:33:"The-Programmers-Brain-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:33:"The-Programmers-Brain-768x963.png";s:5:"width";i:768;s:6:"height";i:963;s:9:"mime-type";s:9:"image/png";}s:9:"1536x1536";a:4:{s:4:"file";s:35:"The-Programmers-Brain-1225x1536.png";s:5:"width";i:1225;s:6:"height";i:1536;s:9:"mime-type";s:9:"image/png";}s:9:"2048x2048";a:4:{s:4:"file";s:35:"The-Programmers-Brain-1633x2048.png";s:5:"width";i:1633;s:6:"height";i:2048;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Good-Code-Bad-Code]]></title>
		<link>https://floatincode.net/?attachment_id=334</link>
		<pubDate>Wed, 18 Aug 2021 07:10:56 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/wp-content/uploads/2021/08/Good-Code-Bad-Code.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>334</wp:post_id>
		<wp:post_date><![CDATA[2021-08-18 07:10:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-08-18 07:10:56]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-08-18 07:10:56]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-08-18 07:10:56]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[good-code-bad-code]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>329</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://floatincode.net/wp-content/uploads/2021/08/Good-Code-Bad-Code.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/08/Good-Code-Bad-Code.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1107;s:6:"height";i:1388;s:4:"file";s:30:"2021/08/Good-Code-Bad-Code.png";s:5:"sizes";a:4:{s:6:"medium";a:4:{s:4:"file";s:30:"Good-Code-Bad-Code-239x300.png";s:5:"width";i:239;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:31:"Good-Code-Bad-Code-817x1024.png";s:5:"width";i:817;s:6:"height";i:1024;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:30:"Good-Code-Bad-Code-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:30:"Good-Code-Bad-Code-768x963.png";s:5:"width";i:768;s:6:"height";i:963;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Learning-Algorithms]]></title>
		<link>https://floatincode.net/?attachment_id=336</link>
		<pubDate>Wed, 18 Aug 2021 07:29:54 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/wp-content/uploads/2021/08/Learning-Algorithms.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>336</wp:post_id>
		<wp:post_date><![CDATA[2021-08-18 07:29:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-08-18 07:29:54]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-08-18 07:29:54]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-08-18 07:29:54]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[learning-algorithms]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>329</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://floatincode.net/wp-content/uploads/2021/08/Learning-Algorithms.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/08/Learning-Algorithms.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:381;s:6:"height";i:499;s:4:"file";s:31:"2021/08/Learning-Algorithms.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:31:"Learning-Algorithms-229x300.jpg";s:5:"width";i:229;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:31:"Learning-Algorithms-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Cracking-the-Coding-Interview]]></title>
		<link>https://floatincode.net/?attachment_id=339</link>
		<pubDate>Wed, 18 Aug 2021 07:51:13 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/wp-content/uploads/2021/08/Cracking-the-Coding-Interview.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>339</wp:post_id>
		<wp:post_date><![CDATA[2021-08-18 07:51:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-08-18 07:51:13]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-08-18 07:51:13]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-08-18 07:51:13]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cracking-the-coding-interview]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>329</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://floatincode.net/wp-content/uploads/2021/08/Cracking-the-Coding-Interview.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/08/Cracking-the-Coding-Interview.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:350;s:6:"height";i:499;s:4:"file";s:41:"2021/08/Cracking-the-Coding-Interview.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:41:"Cracking-the-Coding-Interview-210x300.jpg";s:5:"width";i:210;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:41:"Cracking-the-Coding-Interview-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Developing-Modern-Database-Applications-with-PostgreSQL]]></title>
		<link>https://floatincode.net/?attachment_id=341</link>
		<pubDate>Fri, 20 Aug 2021 05:32:18 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/wp-content/uploads/2021/08/Developing-Modern-Database-Applications-with-PostgreSQL.webp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>341</wp:post_id>
		<wp:post_date><![CDATA[2021-08-20 05:32:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-08-20 05:32:18]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-08-20 05:32:18]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-08-20 05:32:18]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[developing-modern-database-applications-with-postgresql]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>329</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://floatincode.net/wp-content/uploads/2021/08/Developing-Modern-Database-Applications-with-PostgreSQL.webp]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/08/Developing-Modern-Database-Applications-with-PostgreSQL.webp]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:260;s:6:"height";i:320;s:4:"file";s:68:"2021/08/Developing-Modern-Database-Applications-with-PostgreSQL.webp";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:68:"Developing-Modern-Database-Applications-with-PostgreSQL-244x300.webp";s:5:"width";i:244;s:6:"height";i:300;s:9:"mime-type";s:10:"image/webp";}s:9:"thumbnail";a:4:{s:4:"file";s:68:"Developing-Modern-Database-Applications-with-PostgreSQL-150x150.webp";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/webp";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[JavaScript-Cookbook-3rd-Edition]]></title>
		<link>https://floatincode.net/?attachment_id=344</link>
		<pubDate>Fri, 20 Aug 2021 05:39:27 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/wp-content/uploads/2021/08/JavaScript-Cookbook-3rd-Edition.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>344</wp:post_id>
		<wp:post_date><![CDATA[2021-08-20 05:39:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-08-20 05:39:27]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-08-20 05:39:27]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-08-20 05:39:27]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[javascript-cookbook-3rd-edition]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>329</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://floatincode.net/wp-content/uploads/2021/08/JavaScript-Cookbook-3rd-Edition.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/08/JavaScript-Cookbook-3rd-Edition.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:250;s:6:"height";i:328;s:4:"file";s:43:"2021/08/JavaScript-Cookbook-3rd-Edition.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:43:"JavaScript-Cookbook-3rd-Edition-229x300.jpg";s:5:"width";i:229;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:43:"JavaScript-Cookbook-3rd-Edition-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[The-TypeScript-Workshop]]></title>
		<link>https://floatincode.net/?attachment_id=346</link>
		<pubDate>Fri, 20 Aug 2021 05:43:54 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/wp-content/uploads/2021/08/The-TypeScript-Workshop.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>346</wp:post_id>
		<wp:post_date><![CDATA[2021-08-20 05:43:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-08-20 05:43:54]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-08-20 05:43:54]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-08-20 05:43:54]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[the-typescript-workshop]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>329</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://floatincode.net/wp-content/uploads/2021/08/The-TypeScript-Workshop.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/08/The-TypeScript-Workshop.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:250;s:6:"height";i:309;s:4:"file";s:35:"2021/08/The-TypeScript-Workshop.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:35:"The-TypeScript-Workshop-243x300.jpg";s:5:"width";i:243;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:35:"The-TypeScript-Workshop-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Angular-Cookbook]]></title>
		<link>https://floatincode.net/?attachment_id=348</link>
		<pubDate>Fri, 20 Aug 2021 05:49:24 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/wp-content/uploads/2021/08/Angular-Cookbook.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>348</wp:post_id>
		<wp:post_date><![CDATA[2021-08-20 05:49:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-08-20 05:49:24]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-08-20 05:49:24]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-08-20 05:49:24]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[angular-cookbook]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>329</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://floatincode.net/wp-content/uploads/2021/08/Angular-Cookbook.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/08/Angular-Cookbook.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:405;s:6:"height";i:500;s:4:"file";s:28:"2021/08/Angular-Cookbook.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:28:"Angular-Cookbook-243x300.jpg";s:5:"width";i:243;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:28:"Angular-Cookbook-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Scala-Cookbook-2nd-Edition]]></title>
		<link>https://floatincode.net/?attachment_id=350</link>
		<pubDate>Fri, 20 Aug 2021 05:51:15 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/wp-content/uploads/2021/08/Scala-Cookbook-2nd-Edition.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>350</wp:post_id>
		<wp:post_date><![CDATA[2021-08-20 05:51:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-08-20 05:51:15]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-08-20 05:51:15]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-08-20 05:51:15]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[scala-cookbook-2nd-edition]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>329</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://floatincode.net/wp-content/uploads/2021/08/Scala-Cookbook-2nd-Edition.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/08/Scala-Cookbook-2nd-Edition.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:250;s:6:"height";i:328;s:4:"file";s:38:"2021/08/Scala-Cookbook-2nd-Edition.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:38:"Scala-Cookbook-2nd-Edition-229x300.jpg";s:5:"width";i:229;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:38:"Scala-Cookbook-2nd-Edition-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Python-Distilled]]></title>
		<link>https://floatincode.net/?attachment_id=351</link>
		<pubDate>Fri, 20 Aug 2021 05:53:02 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/wp-content/uploads/2021/08/Python-Distilled.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>351</wp:post_id>
		<wp:post_date><![CDATA[2021-08-20 05:53:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-08-20 05:53:02]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-08-20 05:53:02]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-08-20 05:53:02]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[python-distilled]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>329</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://floatincode.net/wp-content/uploads/2021/08/Python-Distilled.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/08/Python-Distilled.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:386;s:6:"height";i:499;s:4:"file";s:28:"2021/08/Python-Distilled.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:28:"Python-Distilled-232x300.jpg";s:5:"width";i:232;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:28:"Python-Distilled-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[image]]></title>
		<link>https://floatincode.net/2021/09/20/snap-to-the-road-google-vs-mapbox-vs-bing/image-17/</link>
		<pubDate>Sat, 18 Sep 2021 10:29:35 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/wp-content/uploads/2021/09/image.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>361</wp:post_id>
		<wp:post_date><![CDATA[2021-09-18 10:29:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-09-18 10:29:35]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-09-18 10:29:35]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-09-18 10:29:35]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-17]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>360</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://floatincode.net/wp-content/uploads/2021/09/image.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/09/image.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:752;s:6:"height";i:859;s:4:"file";s:17:"2021/09/image.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:17:"image-263x300.png";s:5:"width";i:263;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:17:"image-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[image-1]]></title>
		<link>https://floatincode.net/2021/09/20/snap-to-the-road-google-vs-mapbox-vs-bing/image-1-4/</link>
		<pubDate>Sat, 18 Sep 2021 10:36:20 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/wp-content/uploads/2021/09/image-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>362</wp:post_id>
		<wp:post_date><![CDATA[2021-09-18 10:36:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-09-18 10:36:20]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-09-18 10:36:20]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-09-18 10:36:20]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-1-4]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>360</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://floatincode.net/wp-content/uploads/2021/09/image-1.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/09/image-1.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:819;s:6:"height";i:709;s:4:"file";s:19:"2021/09/image-1.png";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:19:"image-1-300x260.png";s:5:"width";i:300;s:6:"height";i:260;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:19:"image-1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:19:"image-1-768x665.png";s:5:"width";i:768;s:6:"height";i:665;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[image-2]]></title>
		<link>https://floatincode.net/2021/09/20/snap-to-the-road-google-vs-mapbox-vs-bing/image-2-4/</link>
		<pubDate>Sat, 18 Sep 2021 10:38:22 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/wp-content/uploads/2021/09/image-2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>363</wp:post_id>
		<wp:post_date><![CDATA[2021-09-18 10:38:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-09-18 10:38:22]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-09-18 10:38:22]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-09-18 10:38:22]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-2-4]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>360</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://floatincode.net/wp-content/uploads/2021/09/image-2.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/09/image-2.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:753;s:6:"height";i:955;s:4:"file";s:19:"2021/09/image-2.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:19:"image-2-237x300.png";s:5:"width";i:237;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:19:"image-2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[image-3]]></title>
		<link>https://floatincode.net/2021/09/20/snap-to-the-road-google-vs-mapbox-vs-bing/image-3-2/</link>
		<pubDate>Sat, 18 Sep 2021 10:40:47 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/wp-content/uploads/2021/09/image-3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>364</wp:post_id>
		<wp:post_date><![CDATA[2021-09-18 10:40:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-09-18 10:40:47]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-09-18 10:40:47]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-09-18 10:40:47]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-3-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>360</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://floatincode.net/wp-content/uploads/2021/09/image-3.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/09/image-3.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:856;s:6:"height";i:1032;s:4:"file";s:19:"2021/09/image-3.png";s:5:"sizes";a:4:{s:6:"medium";a:4:{s:4:"file";s:19:"image-3-249x300.png";s:5:"width";i:249;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:20:"image-3-849x1024.png";s:5:"width";i:849;s:6:"height";i:1024;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:19:"image-3-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:19:"image-3-768x926.png";s:5:"width";i:768;s:6:"height";i:926;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[image-4]]></title>
		<link>https://floatincode.net/2021/09/20/snap-to-the-road-google-vs-mapbox-vs-bing/image-4-2/</link>
		<pubDate>Sat, 18 Sep 2021 11:06:27 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/wp-content/uploads/2021/09/image-4.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>366</wp:post_id>
		<wp:post_date><![CDATA[2021-09-18 11:06:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-09-18 11:06:27]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-09-18 11:06:27]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-09-18 11:06:27]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-4-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>360</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://floatincode.net/wp-content/uploads/2021/09/image-4.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/09/image-4.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:617;s:6:"height";i:702;s:4:"file";s:19:"2021/09/image-4.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:19:"image-4-264x300.png";s:5:"width";i:264;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:19:"image-4-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Sample Page]]></title>
		<link>https://floatincode.net/?page_id=2</link>
		<pubDate>Tue, 23 Feb 2021 18:50:20 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">http://dev-blog-wordpress.manage.floatas.net/?page_id=2</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>This is an example page. It's different from a blog post because it will stay in one place and will show up in your site navigation (in most themes). Most people start with an About page that introduces them to potential site visitors. It might say something like this:</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>Hi there! I'm a bike messenger by day, aspiring actor by night, and this is my website. I live in Los Angeles, have a great dog named Jack, and I like pi&#241;a coladas. (And gettin' caught in the rain.)</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>...or something like this:</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>The XYZ Doohickey Company was founded in 1971, and has been providing quality doohickeys to the public ever since. Located in Gotham City, XYZ employs over 2,000 people and does all kinds of awesome things for the Gotham community.</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>As a new WordPress user, you should go to <a href="http://dev-blog-wordpress.manage.floatas.net/wp-admin/">your dashboard</a> to delete this page and create new pages for your content. Have fun!</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2</wp:post_id>
		<wp:post_date><![CDATA[2021-02-23 18:50:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-02-23 18:50:20]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-03-06 09:14:56]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-03-06 09:14:56]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[sample-page]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Privacy Policy]]></title>
		<link>https://floatincode.net/?page_id=3</link>
		<pubDate>Tue, 23 Feb 2021 18:50:20 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">http://dev-blog-wordpress.manage.floatas.net/?page_id=3</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>Who we are</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Our website address is: https://floatincode.net/.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>What personal data we collect and why we collect it</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>Comments</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>When visitors leave comments on the site we collect the data shown in the comments form, and also the visitor’s IP address and browser user agent string to help spam detection.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>An anonymized string created from your email address (also called a hash) may be provided to the Gravatar service to see if you are using it. The Gravatar service privacy policy is available here: https://automattic.com/privacy/. After approval of your comment, your profile picture is visible to the public in the context of your comment.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Media</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>If you upload images to the website, you should avoid uploading images with embedded location data (EXIF GPS) included. Visitors to the website can download and extract any location data from images on the website.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Contact forms</h3>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>Cookies</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>If you leave a comment on our site you may opt-in to saving your name, email address and website in cookies. These are for your convenience so that you do not have to fill in your details again when you leave another comment. These cookies will last for one year.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you visit our login page, we will set a temporary cookie to determine if your browser accepts cookies. This cookie contains no personal data and is discarded when you close your browser.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When you log in, we will also set up several cookies to save your login information and your screen display choices. Login cookies last for two days, and screen options cookies last for a year. If you select "Remember Me", your login will persist for two weeks. If you log out of your account, the login cookies will be removed.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you edit or publish an article, an additional cookie will be saved in your browser. This cookie includes no personal data and simply indicates the post ID of the article you just edited. It expires after 1 day.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Embedded content from other websites</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Articles on this site may include embedded content (e.g. videos, images, articles, etc.). Embedded content from other websites behaves in the exact same way as if the visitor has visited the other website.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>These websites may collect data about you, use cookies, embed additional third-party tracking, and monitor your interaction with that embedded content, including tracking your interaction with the embedded content if you have an account and are logged in to that website.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Analytics</h3>
<!-- /wp:heading -->

<!-- wp:heading -->
<h2>Who we share your data with</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>If you request a password reset, your IP address will be included in the reset email.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>How long we retain your data</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>If you leave a comment, the comment and its metadata are retained indefinitely. This is so we can recognize and approve any follow-up comments automatically instead of holding them in a moderation queue.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For users that register on our website (if any), we also store the personal information they provide in their user profile. All users can see, edit, or delete their personal information at any time (except they cannot change their username). Website administrators can also see and edit that information.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>What rights you have over your data</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>If you have an account on this site, or have left comments, you can request to receive an exported file of the personal data we hold about you, including any data you have provided to us. You can also request that we erase any personal data we hold about you. This does not include any data we are obliged to keep for administrative, legal, or security purposes.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Where we send your data</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Visitor comments may be checked through an automated spam detection service.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Your contact information</h2>
<!-- /wp:heading -->

<!-- wp:heading -->
<h2>Additional information</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>How we protect your data</h3>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>What data breach procedures we have in place</h3>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>What third parties we receive data from</h3>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>What automated decision making and/or profiling we do with user data</h3>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>Industry regulatory disclosure requirements</h3>
<!-- /wp:heading -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3</wp:post_id>
		<wp:post_date><![CDATA[2021-02-23 18:50:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-02-23 18:50:20]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-03-06 09:59:53]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-03-06 09:59:53]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[privacy-policy]]></wp:post_name>
		<wp:status><![CDATA[pending]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Blog v2.0]]></title>
		<link>https://floatincode.net/2021/03/04/blog-v2-0/</link>
		<pubDate>Thu, 04 Mar 2021 18:42:15 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">http://dev-blog-wordpress.manage.floatas.net/?p=11</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>6 years have passed after starting my first blog, attempts to improve my writing skills continue.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I don't have any large numbers to share, never really marketed my blog, but there are few blog posts worth mentioning.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Most popular old blog posts</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>As of right now, all previous blog posts are "gone", some of them will be recovered and rewritten, but as of right now you probably came to this blog for these two posts.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Visual studio custom file nesting</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>File nesting doesn't exist! And VS Code team is not planning to implement it any time soon. There were several attempts at this and it is possible to implement it even with custom rules. However, VS Code dev team is not ready to make these changes. There are two options, wait or implement it yourself.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Ping me in comments and I will share my own VS Code build with custom file nesting.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>SQL file stream in ASP.NET MVC with Entity framework</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Yeah, I get it. It's fun to implement it, but just <strong>don't do it</strong>. We live in Docker world, there are better solutions for this.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>11</wp:post_id>
		<wp:post_date><![CDATA[2021-03-04 18:42:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-04 18:42:15]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-03-04 18:42:15]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-03-04 18:42:15]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[blog-v2-0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:comment>
			<wp:comment_id>391</wp:comment_id>
			<wp:comment_author><![CDATA[Rudy]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[Rgerla@outlook.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[213.126.30.21]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2022-07-19 08:46:01]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2022-07-19 08:46:01]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[well we have a framework 4.x sytem with winform applications, now we need to store documents preferably in the database so have a look at your old post would help me a lot while implementing it. and sorry, docker is still not an option for us, large system, large clientbase, 

greetings,]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>392</wp:comment_id>
			<wp:comment_author><![CDATA[Floatas]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[floatas@outlook.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://dev-blog-wordpress.manage.floatas.net</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[85.255.62.5]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2022-08-12 17:26:32]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2022-08-12 17:26:32]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hello, Sorry for late response you can still find full project source code at https://github.com/FloatInCodeBlog/SqlFileStreams

I added original blog post with all screenshots to BlogPost folder in that repository.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[ASP.NET CORE Integration tests: Database]]></title>
		<link>https://floatincode.net/2021/03/06/api-integration-testing-database/</link>
		<pubDate>Sat, 06 Mar 2021 10:47:31 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/?p=24</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>In this multi part blog post I will try to walk through integration testing from sending HTTP request to executing database queries against real DB. Approach that we gonna take will fit new projects as well ass legacy, where database has some hardcoded values.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>All source code can be found at my <a href="https://github.com/FloatInCodeBlog/IntegrationDatabase" data-type="URL" data-id="https://github.com/FloatInCodeBlog/IntegrationDatabase" target="_blank" rel="noreferrer noopener">GitHub</a>, clone repository, and run <code>rebuild.cmd</code> to get started right away.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"lineNumbers":true} -->
<pre title="Project structure" class="wp-block-code"><code lang="bash" class="language-bash line-numbers"> │   docker-compose.yml
 │   init.sql
 │   migrate-prod.bat
 │   rebuild.cmd
 │
 └───migrations
     │   Dockerfile
     │   flyway.conf
     │
     └───scripts
             V1_0_0.sql</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Lets start from top we have <code>docker-compose.yml</code> file gluing all pieces together.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"lineNumbers":true} -->
<pre title="docker-compose.yml" class="wp-block-code"><code lang="docker" class="language-docker line-numbers">version:&nbsp;'3.4'
services:
&nbsp;&nbsp;postgres-shop:
&nbsp;&nbsp;&nbsp;&nbsp;image:&nbsp;postgres:12.1
&nbsp;&nbsp;&nbsp;&nbsp;container_name:&nbsp;postgres-shop
&nbsp;&nbsp;&nbsp;&nbsp;volumes:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;./init.sql:/docker-entrypoint-initdb.d/init.sql
&nbsp;&nbsp;&nbsp;&nbsp;environment:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;POSTGRES_USER=postgres
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;POSTGRES_PASSWORD=postgres
&nbsp;&nbsp;&nbsp;&nbsp;ports:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;6444:5432
&nbsp;&nbsp;migrations-shop:
&nbsp;&nbsp;&nbsp;&nbsp;container_name:&nbsp;migrations-shop
&nbsp;&nbsp;&nbsp;&nbsp;command:&nbsp;migrate
&nbsp;&nbsp;&nbsp;&nbsp;depends_on:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;postgres-shop
&nbsp;&nbsp;&nbsp;&nbsp;build:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context:&nbsp;./migrations
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dockerfile:&nbsp;./Dockerfile</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>In order to run migrations flyway has to connect to database, we will take advantage of PostgreSQL initialization script and create database with user after database start.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre title="init.sql" class="wp-block-code"><code lang="sql" class="language-sql">CREATE&nbsp;ROLE&nbsp;admin_user&nbsp;WITH&nbsp;LOGIN&nbsp;PASSWORD&nbsp;'secretPassword123!';

CREATE&nbsp;DATABASE&nbsp;rental;
GRANT&nbsp;ALL&nbsp;PRIVILEGES&nbsp;ON&nbsp;DATABASE&nbsp;rental&nbsp;TO&nbsp;admin_user;</code></pre>
<!-- /wp:code -->

<!-- wp:group -->
<div class="wp-block-group"><div class="wp-block-group__inner-container"><!-- wp:paragraph -->
<p>This is just an example how to run flyway on your machine when you want to apply migrations to your production server. For this to work <strong>download flyway and add it to</strong> your system <strong>path variable</strong></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre title="migrate-prod.bat" class="wp-block-code"><code lang="bash" class="language-bash">flyway&nbsp;-url=jdbc:postgresql://&lt;ip&gt;:&lt;port&gt;/&lt;database&gt;&nbsp;-configFiles=%~dp0\migrations\flyway.conf&nbsp;-locations=filesystem:%~dp0\migrations\scripts&nbsp;migrate</code></pre>
<!-- /wp:code --></div></div>
<!-- /wp:group -->

<!-- wp:paragraph -->
<p>Flyway folder contains all data required to build custom flyway docker image with custom configs and migration scripts.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"lineNumbers":true} -->
<pre title="Dockerfile" class="wp-block-code"><code lang="docker" class="language-docker line-numbers">FROM&nbsp;flyway/flyway:6.0.2-alpine
COPY&nbsp;scripts/*&nbsp;/flyway/sql/
COPY&nbsp;flyway.conf&nbsp;/flyway/conf/</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Truncated version of <code>flyway.conf</code>, with properties that are set. PostgreSQL database and flyway will be running in docker, so we can combine all docker references and newly created database information: server, user, password.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"lineNumbers":true} -->
<pre title="flyway.conf" class="wp-block-code"><code lang="bash" class="language-bash line-numbers">#&nbsp;JDBC&nbsp;url&nbsp;to&nbsp;use&nbsp;to&nbsp;connect&nbsp;to&nbsp;the&nbsp;database
#&nbsp;Examples
#&nbsp;--------
#&nbsp;Most&nbsp;drivers&nbsp;are&nbsp;included&nbsp;out&nbsp;of&nbsp;the&nbsp;box.
#&nbsp;*&nbsp;=&nbsp;JDBC&nbsp;driver&nbsp;must&nbsp;be&nbsp;downloaded&nbsp;and&nbsp;installed&nbsp;in&nbsp;/drivers&nbsp;manually
#&nbsp;**&nbsp;=&nbsp;TNS_ADMIN&nbsp;environment&nbsp;variable&nbsp;must&nbsp;point&nbsp;to&nbsp;the&nbsp;directory&nbsp;of&nbsp;where&nbsp;tnsnames.ora&nbsp;resides
#&nbsp;PostgreSQL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;jdbc:postgresql://&lt;host&gt;:&lt;port&gt;/&lt;database&gt;?&lt;key1&gt;=&lt;value1&gt;&amp;&lt;key2&gt;=&lt;value2&gt;...
flyway.url=jdbc:postgresql://postgres-shop/rental?user=admin_user&amp;password=secretPassword123!

#&nbsp;Fully&nbsp;qualified&nbsp;classname&nbsp;of&nbsp;the&nbsp;JDBC&nbsp;driver&nbsp;(autodetected&nbsp;by&nbsp;default&nbsp;based&nbsp;on&nbsp;flyway.url)
#&nbsp;flyway.driver=

#&nbsp;User&nbsp;to&nbsp;use&nbsp;to&nbsp;connect&nbsp;to&nbsp;the&nbsp;database.&nbsp;Flyway&nbsp;will&nbsp;prompt&nbsp;you&nbsp;to&nbsp;enter&nbsp;it&nbsp;if&nbsp;not&nbsp;specified.
flyway.user=admin_user

#&nbsp;Password&nbsp;to&nbsp;use&nbsp;to&nbsp;connect&nbsp;to&nbsp;the&nbsp;database.&nbsp;Flyway&nbsp;will&nbsp;prompt&nbsp;you&nbsp;to&nbsp;enter&nbsp;it&nbsp;if&nbsp;not&nbsp;specified.
flyway.password=secretPassword123!

#&nbsp;The&nbsp;maximum&nbsp;number&nbsp;of&nbsp;retries&nbsp;when&nbsp;attempting&nbsp;to&nbsp;connect&nbsp;to&nbsp;the&nbsp;database.&nbsp;After&nbsp;each&nbsp;failed&nbsp;attempt,
#&nbsp;Flyway&nbsp;will&nbsp;wait&nbsp;1&nbsp;second&nbsp;before&nbsp;attempting&nbsp;to&nbsp;connect&nbsp;again,&nbsp;up&nbsp;to&nbsp;the&nbsp;maximum&nbsp;number&nbsp;of&nbsp;times&nbsp;specified
#&nbsp;by&nbsp;connectRetries.&nbsp;(default:&nbsp;0)
flyway.connectRetries=360

#&nbsp;Comma-separated&nbsp;list&nbsp;of&nbsp;schemas&nbsp;managed&nbsp;by&nbsp;Flyway.&nbsp;These&nbsp;schema&nbsp;names&nbsp;are&nbsp;case-sensitive.
#&nbsp;Consequences:
#&nbsp;-&nbsp;Flyway&nbsp;will&nbsp;automatically&nbsp;attempt&nbsp;to&nbsp;create&nbsp;all&nbsp;these&nbsp;schemas,&nbsp;unless&nbsp;the&nbsp;first&nbsp;one&nbsp;already&nbsp;exists.
#&nbsp;-&nbsp;The&nbsp;first&nbsp;schema&nbsp;in&nbsp;the&nbsp;list&nbsp;will&nbsp;be&nbsp;automatically&nbsp;set&nbsp;as&nbsp;the&nbsp;default&nbsp;one&nbsp;during&nbsp;the&nbsp;migration.
#&nbsp;-&nbsp;The&nbsp;first&nbsp;schema&nbsp;in&nbsp;the&nbsp;list&nbsp;will&nbsp;also&nbsp;be&nbsp;the&nbsp;one&nbsp;containing&nbsp;the&nbsp;schema&nbsp;history&nbsp;table.
#&nbsp;-&nbsp;The&nbsp;schemas&nbsp;will&nbsp;be&nbsp;cleaned&nbsp;in&nbsp;the&nbsp;order&nbsp;of&nbsp;this&nbsp;list.
#&nbsp;-&nbsp;If&nbsp;Flyway&nbsp;created&nbsp;them,&nbsp;the&nbsp;schemas&nbsp;themselves&nbsp;will&nbsp;as&nbsp;be&nbsp;dropped&nbsp;when&nbsp;cleaning.
#&nbsp;(default:&nbsp;The&nbsp;default&nbsp;schema&nbsp;for&nbsp;the&nbsp;database&nbsp;connection)
flyway.schemas=public,rental

#&nbsp;Name&nbsp;of&nbsp;Flyway's&nbsp;schema&nbsp;history&nbsp;table&nbsp;(default:&nbsp;flyway_schema_history)
#&nbsp;By&nbsp;default&nbsp;(single-schema&nbsp;mode)&nbsp;the&nbsp;schema&nbsp;history&nbsp;table&nbsp;is&nbsp;placed&nbsp;in&nbsp;the&nbsp;default&nbsp;schema&nbsp;for&nbsp;the&nbsp;connection
#&nbsp;provided&nbsp;by&nbsp;the&nbsp;datasource.
#&nbsp;When&nbsp;the&nbsp;flyway.schemas&nbsp;property&nbsp;is&nbsp;set&nbsp;(multi-schema&nbsp;mode),&nbsp;the&nbsp;schema&nbsp;history&nbsp;table&nbsp;is&nbsp;placed&nbsp;in&nbsp;the&nbsp;first
#&nbsp;schema&nbsp;of&nbsp;the&nbsp;list.
flyway.table=schema_migrations

#&nbsp;The&nbsp;version&nbsp;to&nbsp;tag&nbsp;an&nbsp;existing&nbsp;schema&nbsp;with&nbsp;when&nbsp;executing&nbsp;baseline.&nbsp;(default:&nbsp;1)
flyway.baselineVersion=1

#&nbsp;The&nbsp;description&nbsp;to&nbsp;tag&nbsp;an&nbsp;existing&nbsp;schema&nbsp;with&nbsp;when&nbsp;executing&nbsp;baseline.&nbsp;(default:&nbsp;&lt;&lt;&nbsp;Flyway&nbsp;Baseline&nbsp;&gt;&gt;)
flyway.baselineDescription=Initial&nbsp;version

#&nbsp;Whether&nbsp;to&nbsp;automatically&nbsp;call&nbsp;baseline&nbsp;when&nbsp;migrate&nbsp;is&nbsp;executed&nbsp;against&nbsp;a&nbsp;non-empty&nbsp;schema&nbsp;with&nbsp;no&nbsp;schema&nbsp;history
#&nbsp;table.&nbsp;This&nbsp;schema&nbsp;will&nbsp;then&nbsp;be&nbsp;initialized&nbsp;with&nbsp;the&nbsp;baselineVersion&nbsp;before&nbsp;executing&nbsp;the&nbsp;migrations.
#&nbsp;Only&nbsp;migrations&nbsp;above&nbsp;baselineVersion&nbsp;will&nbsp;then&nbsp;be&nbsp;applied.
#&nbsp;This&nbsp;is&nbsp;useful&nbsp;for&nbsp;initial&nbsp;Flyway&nbsp;production&nbsp;deployments&nbsp;on&nbsp;projects&nbsp;with&nbsp;an&nbsp;existing&nbsp;DB.
#&nbsp;Be&nbsp;careful&nbsp;when&nbsp;enabling&nbsp;this&nbsp;as&nbsp;it&nbsp;removes&nbsp;the&nbsp;safety&nbsp;net&nbsp;that&nbsp;ensures
#&nbsp;Flyway&nbsp;does&nbsp;not&nbsp;migrate&nbsp;the&nbsp;wrong&nbsp;database&nbsp;in&nbsp;case&nbsp;of&nbsp;a&nbsp;configuration&nbsp;mistake!&nbsp;(default:&nbsp;false)
flyway.baselineOnMigrate=true</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Finally <code>Scripts</code> folder contains all migration scripts. There are multiple ways to configure script file naming, for this example simple V{major}_{minor}_{patch} naming is sufficient. Scripts will be executed in order, based on versioning.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now that we have all the pieces ready, lets run <code>docker-compose</code> . To make things easier I wrote small script: stop all containers, clear cache (this is necessary in order to rebuild flyway docker container with new script files), start all containers and apply migrations.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"lineNumbers":false} -->
<pre title="rebuild.cmd" class="wp-block-code"><code lang="bash" class="language-bash">docker-compose&nbsp;down
docker-compose&nbsp;build&nbsp;--no-cache
docker-compose&nbsp;up</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Running <code>rebuild.cmd</code> will start PostgreSQL, initialize it by creating our user and database. Flyway will be started as soon as PostgreSQL starts up and will log few warnings. It takes few seconds for the database to become available. Finally, scripts will be executed, results can be viewed in <code>public.schema_migrations</code> table.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":40,"width":785,"height":124,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large is-resized"><img src="https://floatincode.net/wp-content/uploads/2021/03/image-1024x162.png" alt="" class="wp-image-40" width="785" height="124"/><figcaption>Flyway migration table</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>In this blog post, we looked at a simple approach to start a local database in docker and run migrations. PostgreSQL can be replaced by any other database, flyway supports dozen of them, even flyway can be replaced by other migration running tools. I used this migration approach in work and in my personal projects, we haven't found any drawbacks or limitations. When working with a legacy database initialization can be done from a backup, when working in larger teams I would recommend using different versioning and running scripts <code>out of order</code>.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>24</wp:post_id>
		<wp:post_date><![CDATA[2021-03-06 10:47:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-06 10:47:31]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-03-29 03:34:52]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-03-29 03:34:52]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[api-integration-testing-database]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="database"><![CDATA[database]]></category>
		<category domain="post_tag" nicename="flyway"><![CDATA[Flyway]]></category>
		<category domain="post_tag" nicename="postgresql"><![CDATA[PostgreSQL]]></category>
		<category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[ct_author_last_updated]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[ASP.NET CORE Integration tests: API]]></title>
		<link>https://floatincode.net/2021/03/29/asp-net-core-integration-tests-api/</link>
		<pubDate>Mon, 29 Mar 2021 03:34:41 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/?p=27</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>All source code can be found at my <a rel="noreferrer noopener" href="https://github.com/FloatInCodeBlog/ApiIntegrationTests" target="_blank" data-type="URL" data-id="https://github.com/FloatInCodeBlog/ApiIntegrationTests">GitHub</a>, clone repository, and run all tests.</p>
<!-- /wp:paragraph -->

<!-- wp:group -->
<div class="wp-block-group"><div class="wp-block-group__inner-container"><!-- wp:paragraph -->
<p>In this blog post, I will cover how to use <code>WebApplicationFactory</code> and how to build <code>IWebHost</code> and <code>IHost</code> manually for testing. Then we will see how to replace services for both hosting types without custom mock services as well as <code>Moq</code>.</p>
<!-- /wp:paragraph --></div></div>
<!-- /wp:group -->

<!-- wp:paragraph -->
<p>For testing, we will use the default <code>WeatherForecastController</code>,  all logic will be moved to service in order to demonstrate how to replace that service for testing.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"lineNumbers":true} -->
<pre title="Weather forecast controller" class="wp-block-code"><code lang="csharp" class="language-csharp line-numbers">&nbsp;&nbsp;&nbsp;&nbsp;[ApiController]
&nbsp;&nbsp;&nbsp;&nbsp;[Route("[controller]")]
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;class&nbsp;WeatherForecastController&nbsp;:&nbsp;ControllerBase
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;readonly&nbsp;IWeatherService&nbsp;_weatherService;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;WeatherForecastController(IWeatherService&nbsp;weatherService)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_weatherService&nbsp;=&nbsp;weatherService;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[HttpGet]
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;IEnumerable&lt;WeatherForecast&gt;&nbsp;Get()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;_weatherService.Get();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}</code></pre>
<!-- /wp:code -->

<!-- wp:code {"lineNumbers":true} -->
<pre title="Weather service" class="wp-block-code"><code lang="csharp" class="language-csharp line-numbers"><code>
<code>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;class&nbsp;WeatherService&nbsp;:&nbsp;IWeatherService
&nbsp;&nbsp;&nbsp;&nbsp;{

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;static&nbsp;readonly&nbsp;string[]&nbsp;Summaries&nbsp;=&nbsp;new[]
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Freezing",&nbsp;"Bracing",&nbsp;"Chilly",&nbsp;"Cool",&nbsp;"Mild",&nbsp;"Warm",&nbsp;"Balmy",&nbsp;"Hot",&nbsp;"Sweltering",&nbsp;"Scorching"
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;IEnumerable&lt;WeatherForecast&gt;&nbsp;Get()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;rng&nbsp;=&nbsp;new&nbsp;Random();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Enumerable.Range(1,&nbsp;5).Select(index&nbsp;=&gt;&nbsp;new&nbsp;WeatherForecast
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Date&nbsp;=&nbsp;DateTime.Now.AddDays(index),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TemperatureC&nbsp;=&nbsp;rng.Next(-20,&nbsp;55),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Summary&nbsp;=&nbsp;Summaries[rng.Next(Summaries.Length)]
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.ToArray();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}</code></code></code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Testing with <code>WebApplicationFactory</code></h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The easiest and fastest way to get started writing tests. <code>Host</code> building logic will be taken care of for you. However mocking services will be much more difficult compared to building <code>Host</code> by yourself.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In both cases <code>IHost</code> and <code>IWebHost</code> test class will be identical.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"lineNumbers":true} -->
<pre title="IClassFixture with WebApplicationFactory" class="wp-block-code"><code lang="csharp" class="language-csharp line-numbers">&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;class&nbsp;WeatherForecastControllerTests&nbsp;:&nbsp;IClassFixture&lt;TestHostProjectFactory&gt;
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;HttpClient&nbsp;_client;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;WeatherForecastControllerTests(TestHostProjectFactory&nbsp;factory)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_client&nbsp;=&nbsp;factory.CreateClient();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Fact]
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;async&nbsp;Task&nbsp;GetWeatherForecast()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;result&nbsp;=&nbsp;await&nbsp;_client.GetStringAsync("WeatherForecast");

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;expected&nbsp;=&nbsp;WeatherServiceMock.FakeData;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;actual&nbsp;=&nbsp;JsonConvert.DeserializeObject&lt;IEnumerable&lt;WeatherForecast&gt;&gt;(result);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;comparer&nbsp;=&nbsp;new&nbsp;CompareLogic();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;compareResult&nbsp;=&nbsp;comparer.Compare(expected,&nbsp;actual);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Assert.True(compareResult.AreEqual,&nbsp;compareResult.DifferencesString);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>WebHost</h3>
<!-- /wp:heading -->

<!-- wp:code {"lineNumbers":true} -->
<pre title="WebHost test factory" class="wp-block-code"><code lang="csharp" class="language-csharp line-numbers">&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;class&nbsp;TestWebHostProjectFactory&nbsp;:&nbsp;WebApplicationFactory&lt;Startup&gt;
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;override&nbsp;void&nbsp;ConfigureWebHost(IWebHostBuilder&nbsp;builder)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;builder
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.UseEnvironment("Test")
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.ConfigureTestServices(services&nbsp;=&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;services.Replace(ServiceDescriptor.Transient&lt;IWeatherService,&nbsp;WeatherServiceMock&gt;());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Host</h3>
<!-- /wp:heading -->

<!-- wp:code {"lineNumbers":true} -->
<pre title="Host test factory" class="wp-block-code"><code lang="csharp" class="language-csharp line-numbers">&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;class&nbsp;TestHostProjectFactory&nbsp;:&nbsp;WebApplicationFactory&lt;Startup&gt;
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;override&nbsp;IHost&nbsp;CreateHost(IHostBuilder&nbsp;builder)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;builder
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.UseEnvironment("Test")
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.ConfigureServices(services&nbsp;=&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;services.Replace(ServiceDescriptor.Transient&lt;IWeatherService,&nbsp;WeatherServiceMock&gt;());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;base.CreateHost(builder);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>When comparing both WebApplicationFactories we can see that there is only one difference. <code>WebHost</code> <code>ConfigureTestServices</code> and in <code>Host</code> we have <code>ConfigureServices</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This method has one drawback, that you have to know and mock all services. For example, if you want to mock <code>ServiceA</code> for one test and <code>ServiceB</code> for another test, then you would have some issues. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Create host directly in test</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Previously we looked at how to replace service in <code>WebApplicationFactory</code> but it really limits tests, since tests need different services to be mocked. By creating host directly in tests we will have fine-grained control on which services are mocked and even take control of make things easier.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>WebHost</h3>
<!-- /wp:heading -->

<!-- wp:code {"lineNumbers":true} -->
<pre title="Dynamic service mock in WebHost" class="wp-block-code"><code lang="csharp" class="language-csharp line-numbers">[Fact]
public&nbsp;async&nbsp;Task&nbsp;GetWeatherForecastMoq()
{
&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;mock&nbsp;=&nbsp;new&nbsp;Mock&lt;IWeatherService&gt;();

&nbsp;&nbsp;&nbsp;&nbsp;using&nbsp;var&nbsp;host&nbsp;=&nbsp;new&nbsp;HostBuilder()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.ConfigureWebHost(webBuilder&nbsp;=&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;webBuilder
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.UseTestServer()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.UseStartup&lt;Startup&gt;()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//ConfigureTestServices&nbsp;must&nbsp;be&nbsp;bellow&nbsp;UseStartup
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.ConfigureTestServices(services&nbsp;=&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;services.Replace(ServiceDescriptor.Transient(_&nbsp;=&gt;&nbsp;mock.Object));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.Build();
&nbsp;&nbsp;&nbsp;&nbsp;await&nbsp;host.StartAsync();

&nbsp;&nbsp;&nbsp;&nbsp;mock.Setup(_&nbsp;=&gt;&nbsp;_.Get()).Returns(WeatherServiceMock.FakeData);

&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;_client&nbsp;=&nbsp;host.GetTestServer().CreateClient();

&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;result&nbsp;=&nbsp;await&nbsp;_client.GetStringAsync("WeatherForecast");

&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;expected&nbsp;=&nbsp;WeatherServiceMock.FakeData;
&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;actual&nbsp;=&nbsp;JsonConvert.DeserializeObject&lt;IEnumerable&lt;WeatherForecast&gt;&gt;(result);

&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;comparer&nbsp;=&nbsp;new&nbsp;CompareLogic();
&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;compareResult&nbsp;=&nbsp;comparer.Compare(expected,&nbsp;actual);
&nbsp;&nbsp;&nbsp;&nbsp;Assert.True(compareResult.AreEqual,&nbsp;compareResult.DifferencesString);
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Host</h3>
<!-- /wp:heading -->

<!-- wp:code {"lineNumbers":true} -->
<pre title="Dynamic service mock in Host" class="wp-block-code"><code lang="csharp" class="language-csharp line-numbers">[Fact]
public&nbsp;async&nbsp;Task&nbsp;GetWeatherForecastMoq()
{
&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;mock&nbsp;=&nbsp;new&nbsp;Mock&lt;IWeatherService&gt;();

&nbsp;&nbsp;&nbsp;&nbsp;using&nbsp;var&nbsp;host&nbsp;=&nbsp;new&nbsp;HostBuilder()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.ConfigureWebHost(webBuilder&nbsp;=&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;webBuilder
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.UseTestServer()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.UseStartup&lt;Startup&gt;();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.ConfigureServices(services&nbsp;=&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;services.Replace(ServiceDescriptor.Transient(_&nbsp;=&gt;&nbsp;mock.Object));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.Build();
&nbsp;&nbsp;&nbsp;&nbsp;await&nbsp;host.StartAsync();

&nbsp;&nbsp;&nbsp;&nbsp;mock.Setup(_&nbsp;=&gt;&nbsp;_.Get()).Returns(WeatherServiceMock.FakeData);

&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;_client&nbsp;=&nbsp;host.GetTestServer().CreateClient();

&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;result&nbsp;=&nbsp;await&nbsp;_client.GetStringAsync("WeatherForecast");

&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;expected&nbsp;=&nbsp;WeatherServiceMock.FakeData;
&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;actual&nbsp;=&nbsp;JsonConvert.DeserializeObject&lt;IEnumerable&lt;WeatherForecast&gt;&gt;(result);

&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;comparer&nbsp;=&nbsp;new&nbsp;CompareLogic();
&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;compareResult&nbsp;=&nbsp;comparer.Compare(expected,&nbsp;actual);
&nbsp;&nbsp;&nbsp;&nbsp;Assert.True(compareResult.AreEqual,&nbsp;compareResult.DifferencesString);
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>As in a previous example there is only one main difference, <code>WebHost</code> has special method to configure services <code>ConfigureTestServices</code> while <code>Host</code> has to call default <code>ConfigureServices</code> method. Also it is really important where you call service configuratiom method. <strong>Service configuration method must be after <code>UseStartup</code>.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Code cleanup</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>As in all final steps, lets do some code cleanup and make tests a bit easier to read and code more reusable.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"lineNumbers":true} -->
<pre title="HttpClientFactory" class="wp-block-code"><code lang="csharp" class="language-csharp line-numbers">public&nbsp;class&nbsp;HttpClientFactory
{
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;async&nbsp;Task&lt;HttpClient&gt;&nbsp;GetAsync(Action&lt;IServiceCollection&gt;&nbsp;configureServices)
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;host&nbsp;=&nbsp;new&nbsp;HostBuilder()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.ConfigureWebHost(webBuilder&nbsp;=&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;webBuilder
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.UseTestServer()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.UseStartup&lt;Startup&gt;();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.ConfigureServices(configureServices)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.Build();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;await&nbsp;host.StartAsync();

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;host.GetTestServer().CreateClient();
&nbsp;&nbsp;&nbsp;&nbsp;}
}</code></pre>
<!-- /wp:code -->

<!-- wp:code {"lineNumbers":true} -->
<pre title="Code cleanup on tests" class="wp-block-code"><code lang="csharp" class="language-csharp line-numbers">[Fact]
public&nbsp;async&nbsp;Task&nbsp;GetWeatherForecastMoqCustomBuilder()
{
&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;mock&nbsp;=&nbsp;new&nbsp;Mock&lt;IWeatherService&gt;();

&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;_client&nbsp;=&nbsp;await&nbsp;new&nbsp;HttpClientFactory()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.GetAsync(services&nbsp;=&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;services.Replace(ServiceDescriptor.Transient(_&nbsp;=&gt;&nbsp;mock.Object));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});

&nbsp;&nbsp;&nbsp;&nbsp;mock.Setup(_&nbsp;=&gt;&nbsp;_.Get()).Returns(WeatherServiceMock.FakeData);

&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;result&nbsp;=&nbsp;await&nbsp;_client.GetStringAsync("WeatherForecast");

&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;expected&nbsp;=&nbsp;WeatherServiceMock.FakeData;
&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;actual&nbsp;=&nbsp;JsonConvert.DeserializeObject&lt;IEnumerable&lt;WeatherForecast&gt;&gt;(result);

&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;comparer&nbsp;=&nbsp;new&nbsp;CompareLogic();
&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;compareResult&nbsp;=&nbsp;comparer.Compare(expected,&nbsp;actual);
&nbsp;&nbsp;&nbsp;&nbsp;Assert.True(compareResult.AreEqual,&nbsp;compareResult.DifferencesString);
}</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3>Building Host vs using default Host builder</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In these examples I created <code>Host</code> from scratch, however, most projects use default host builder.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre title="Create Host from scratch" class="wp-block-code"><code lang="csharp" class="language-csharp">new HostBuilder()</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Switching to default builder saves some time, since it configures quite a few things for you, including settings.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre title="Using default Host builder" class="wp-block-code"><code lang="csharp" class="language-csharp">Host.CreateDefaultBuilder()</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>Summary</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In this post, we saw how easy it is to start writing integration tests for API projects. We covered two different hosting methods <code>IWebHost</code> and <code>IHost</code> and identified the main differences on how to mock services. While <code>WebApplicationFactory</code> is easier to get started, manually creating host in tests gives much better control of how services are mocked.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>27</wp:post_id>
		<wp:post_date><![CDATA[2021-03-29 03:34:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-29 03:34:41]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-04-23 16:03:56]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-04-23 16:03:56]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[asp-net-core-integration-tests-api]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="api"><![CDATA[API]]></category>
		<category domain="post_tag" nicename="c-sharp"><![CDATA[C#]]></category>
		<category domain="post_tag" nicename="moq"><![CDATA[Moq]]></category>
		<category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
		<category domain="post_tag" nicename="testing"><![CDATA[testing]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[ct_author_last_updated]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[ASP.NET CORE Integration tests: Database with API]]></title>
		<link>https://floatincode.net/2021/04/26/integration-testing-database-with-api/</link>
		<pubDate>Mon, 26 Apr 2021 04:56:54 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/?p=29</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Now that we have database migrations and API integration tests set up we can combine them together. In this post, I will go through some tips and tools that proved to be really helpful. <a rel="noreferrer noopener" href="https://github.com/FloatInCodeBlog/ApiIntegrationTests/tree/with-db" data-type="URL" data-id="https://github.com/FloatInCodeBlog/ApiIntegrationTests/tree/with-db" target="_blank">Source code.</a></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Double-check that you are using test DB</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The first thing that you should be doing is make sure you are running tests in test environment. Usually when working we switch our connection strings to our QA or even one of our production databases, the least that we want is to corrupt these databases.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This check will vary from project to project, I usually check client or user count in DB, for tests, there shouldn't be that many, at least for our tests.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre title="Check if tests are using test DB" class="wp-block-code"><code lang="csharp" class="language-csharp">var&nbsp;maxAllowedEntries&nbsp;=&nbsp;100;

using&nbsp;var&nbsp;conn&nbsp;=&nbsp;new&nbsp;NpgsqlConnection(settings.Value.ConnectionString);

var&nbsp;entries&nbsp;=&nbsp;await&nbsp;conn.ExecuteScalarAsync&lt;int&gt;("select&nbsp;count(*)&nbsp;from&nbsp;weather_predictions.predictions");

return&nbsp;entries&nbsp;&lt;&nbsp;maxAllowedEntries;</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>Disable test concurrency</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>We have one test DB, logically we can only run one test at a time. This can be controlled with collections.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre title="Disable concurrency with attribute" class="wp-block-code"><code lang="csharp" class="language-csharp">[Collection(nameof(NotThreadSafeResourceCollection))]
public class WeatherForecastControllerDatabaseTests
{</code></pre>
<!-- /wp:code -->

<!-- wp:code -->
<pre title="Attribute to disable concurrency" class="wp-block-code"><code lang="csharp" class="language-csharp">[CollectionDefinition(nameof(NotThreadSafeResourceCollection),&nbsp;DisableParallelization&nbsp;=&nbsp;true)]
public&nbsp;class&nbsp;NotThreadSafeResourceCollection
{
}</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>Clear database after each test with Respawn</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>It is possible to restart docker and rebuild the entire database after each test but that would take a lot of time. <a href="https://www.nuget.org/packages/Respawn/" data-type="URL" data-id="https://www.nuget.org/packages/Respawn/" target="_blank" rel="noreferrer noopener">Respawn </a>NuGet allows us to clear the database, either full or partial with initialization scripts.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre title="Clear database data before each test" class="wp-block-code"><code lang="csharp" class="language-csharp">var&nbsp;checkpoint&nbsp;=&nbsp;new&nbsp;Checkpoint
{
&nbsp;&nbsp;&nbsp;&nbsp;TablesToIgnore&nbsp;=&nbsp;new&nbsp;string[]&nbsp;{&nbsp;},
&nbsp;&nbsp;&nbsp;&nbsp;SchemasToInclude&nbsp;=&nbsp;new&nbsp;string[]&nbsp;{&nbsp;},
&nbsp;&nbsp;&nbsp;&nbsp;DbAdapter&nbsp;=&nbsp;DbAdapter.Postgres
};
using&nbsp;var&nbsp;conn&nbsp;=&nbsp;new&nbsp;NpgsqlConnection(settings.Value.ConnectionString);
await&nbsp;conn.OpenAsync();

await&nbsp;checkpoint.Reset(conn);</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>Comparing objects</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>For object comparison, I highly recommend using <a rel="noreferrer noopener" href="https://www.nuget.org/packages/CompareNETObjects" data-type="URL" data-id="https://www.nuget.org/packages/CompareNETObjects" target="_blank">Compare-Net-Objects</a>, this NuGet will cover all the use cases that you need.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre title="Ignore order when comparing lists" class="wp-block-code"><code lang="csharp" class="language-csharp">//When&nbsp;we&nbsp;ignore&nbsp;collection&nbsp;order&nbsp;we&nbsp;must&nbsp;specify&nbsp;key&nbsp;which&nbsp;will&nbsp;be&nbsp;used&nbsp;to&nbsp;match&nbsp;actual&nbsp;with&nbsp;expected
comparer.Config.IgnoreCollectionOrder&nbsp;=&nbsp;true;
comparer.Config.CollectionMatchingSpec.Add(typeof(WeatherForecast),&nbsp;new&nbsp;List&lt;string&gt;&nbsp;{&nbsp;nameof(WeatherForecast.Date)&nbsp;});</code></pre>
<!-- /wp:code -->

<!-- wp:code -->
<pre title="Custom comparer for one object property" class="wp-block-code"><code lang="csharp" class="language-csharp">//Summary&nbsp;will&nbsp;be&nbsp;random,&nbsp;we&nbsp;don't&nbsp;really&nbsp;care&nbsp;about&nbsp;in&nbsp;this&nbsp;test.&nbsp;Check&nbsp;if&nbsp;it's&nbsp;not&nbsp;null.
comparer.Config.CustomPropertyComparer&lt;WeatherForecast&gt;(obj&nbsp;=&gt;&nbsp;obj.Summary,
&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;CustomComparer&lt;string,&nbsp;string&gt;((expected,&nbsp;actual)&nbsp;=&gt;&nbsp;!string.IsNullOrEmpty(actual)));</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>Summary</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In order to run tests fluently some gluing is needed. The first thing should be security, make sure you are using test DB and not production or another shared database. Since only one test can be running at any given time - make sure to configure concurrency, otherwise, you will have to debug a lot of random failing tests due to multiple tests writing data to DB. Lastly comparing objects should be easy, instead of writing tons of helpers invest some time and look into Compare-Net-Objects it's highly customizable and will cover all your cases.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>29</wp:post_id>
		<wp:post_date><![CDATA[2021-04-26 04:56:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-04-26 04:56:54]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-04-26 04:57:27]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-04-26 04:57:27]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[integration-testing-database-with-api]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="api"><![CDATA[API]]></category>
		<category domain="post_tag" nicename="c-sharp"><![CDATA[C#]]></category>
		<category domain="post_tag" nicename="database"><![CDATA[database]]></category>
		<category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
		<category domain="post_tag" nicename="testing"><![CDATA[testing]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[ct_author_last_updated]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Running identity provider]]></title>
		<link>https://floatincode.net/?p=32</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/?p=32</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>In docker, create sample with multiple websites using same account</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>32</wp:post_id>
		<wp:post_date><![CDATA[2021-03-06 05:35:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-03-06 05:35:32]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-03-06 05:35:32]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
						</item>
					<item>
		<title><![CDATA[OpenApi for old projects]]></title>
		<link>https://floatincode.net/?p=34</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/?p=34</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>How to generate swagger for old projects</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>34</wp:post_id>
		<wp:post_date><![CDATA[2021-08-24 07:03:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-08-24 07:03:36]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-08-24 07:03:36]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[ct_author_last_updated]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[]]></title>
		<link>https://floatincode.net/?p=50</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/?p=50</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>50</wp:post_id>
		<wp:post_date><![CDATA[2021-03-06 09:56:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-03-06 09:56:43]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[post_type]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[page]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_orphaned]]></wp:meta_key>
		<wp:meta_value><![CDATA[1615024603]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[]]></title>
		<link>https://floatincode.net/?p=51</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/?p=51</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>51</wp:post_id>
		<wp:post_date><![CDATA[2021-03-06 09:57:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-03-06 09:57:30]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[post_type]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[page]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_orphaned]]></wp:meta_key>
		<wp:meta_value><![CDATA[1615024650]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[]]></title>
		<link>https://floatincode.net/?p=52</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/?p=52</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>52</wp:post_id>
		<wp:post_date><![CDATA[2021-03-06 09:59:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-03-06 09:59:41]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[post_type]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[page]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_orphaned]]></wp:meta_key>
		<wp:meta_value><![CDATA[1615024781]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[404: Page Not Found]]></title>
		<link>https://floatincode.net/404-page-not-found/</link>
		<pubDate>Sun, 07 Mar 2021 16:29:31 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/?page_id=71</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Looks like nothing was found on this url. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This blog has started new life please read <a href="https://floatincode.net/2021/03/04/blog-v2-0/">Blog v2.0 – Float In Code</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>71</wp:post_id>
		<wp:post_date><![CDATA[2021-03-07 16:29:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-07 16:29:31]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-03-07 16:29:31]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-03-07 16:29:31]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[404-page-not-found]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title><![CDATA[Noda time everywhere]]></title>
		<link>https://floatincode.net/?p=77</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/?p=77</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>use ful links and link to repository</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Getting started with Noda time</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>&lt;how to get current time>, &lt;inject Iclock>, &lt;convert to timezone time>, &lt;convert from utc></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>1. Mapping HTTP requests to Noda time</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>&lt;response>, &lt;request></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>2. Query and map Noda time types using Dapper and Postgresql</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>&lt;mapping with nuget>, &lt;show actual code that does the mapping></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>3. Query and map Noda time types using EntityFramework and Postgresql</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>&lt;mapping with nuget>, &lt;show actual code that does the mapping>, &lt;code generation ?></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>4. Using Noda time in testing</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>&lt;how to mock time - go forward, backwards, reset></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>5. Convert Noda time types in swagger JSON</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>&lt;convert noda time to integer for unix time></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>send int -> map to noda time</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>testing -&gt; how to mock time, move forward</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>converting to timezones (maybe with docker)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>database mappings -&gt; postgresql, show nuget and in general how it's done</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Entity framework</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>swagger mappings -> map to integer type</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>how to get current time (injecting IClock)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>docker and timezone conversion</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":161,"sizeSlug":"large","linkDestination":"none"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><img src="https://floatincode.net/wp-content/uploads/2021/05/NodaTime.png" alt="" class="wp-image-161"/></figure></div>
<!-- /wp:image -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>77</wp:post_id>
		<wp:post_date><![CDATA[2021-05-12 05:28:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-05-12 05:28:32]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-05-12 05:28:32]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[ct_author_last_updated]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Fiido D4S: first summer with an electric-assist bike]]></title>
		<link>https://floatincode.net/?p=129</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/?p=129</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>I could compare this experience to buying 34 inch ultra wide curved monitor - you don't really notice it, just feels natural. I usually drive on 4-6 gear with 50% assist, I have to pedal, and it's not super easy, but at the same time I'm always going +24 kmh. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Mine came with a mud protector.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><!-- wp:list-item -->
<li>Adjustable steering wheel and seat height</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Gears</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Price</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Portable</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Good battery/range</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Gears and assist</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>1 - 6 gear + assist = +20kmh, three assist modes 25%, 50%, 75% and full throttle. </p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Fiido D4S vs Ninebot Segway Max G30</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>similar price, similar specs - comparison</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For Fiido D4S 20 kmh speed is quite normal, but for Ninebot and scooters in general 20km is on the lower side. On straight roads, it might be harder to keep high speeds and Ninebot will be ahead, but on roads with corners, Fiido wins.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Unlocking full speed</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>There is a number of videos and tutorials on how to unlock an additional power, it's not a dramatic improvement, but it's something. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Turn the bike off, full throttle, press both brakes and turn the bike on - wait until the error message appears and release throttle and brakes. Do it again and you will toggle it again.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Ride history</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>I kept a log every time I charged the bike with some notes about the ride. All my rides are on 4-6th gear with 50-75% assist.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>25% is not that noticeable, and gears from 1 to 3 are kind of worthless when using 50 - 75 % assist. You only need to pedal a few times and then your legs just wobble in the air without any resistance. And once the bike starts to use electric power, you need to pedal once in a while to notify him that you still want to go further, otherwise, the electric assist will turn off, at this point, it's more comfortable to just use the throttle.</p>
<!-- /wp:paragraph -->

<!-- wp:table -->
<figure class="wp-block-table"><table><tbody><tr><td><strong>Single charge</strong></td><td><strong>Total</strong></td><td><strong>Comments</strong></td></tr><tr><td>58 km</td><td>58 km</td><td>Battery charged from the factory started riding with around 60-70% of battery.  Tried all modes, and found that 2-3 assist and 4-6 gears fit me best. Used throttle mostly to get the initial speed and in some corners.</td></tr><tr><td>87 km </td><td>145 km</td><td></td></tr><tr><td>73 km</td><td>218 km</td><td></td></tr><tr><td>73 km</td><td>291 km</td><td></td></tr><tr><td>60 km</td><td>351 km</td><td>Mostly on electricity. Got the first error E005, but after turning it on and off error disappeared. Also, I noticed that when you turn on a bike with breaks you get this error, and on release, it's no longer shown.</td></tr><tr><td>59 km</td><td>410 km</td><td>The battery still has 1-1.5 bars left, but looking at the weather it's unlikely that I will go somewhere any time soon. Winter break.</td></tr><tr><td>57 km</td><td>467 km</td><td>What was left from the previous + fully charged?</td></tr><tr><td>58 km</td><td>525 km</td><td>1 bar left, but have to charge before the long trip.</td></tr><tr><td>70 km</td><td>595 km</td><td>Mostly on turbo</td></tr><tr><td>75 km</td><td>670 km</td><td></td></tr></tbody></table></figure>
<!-- /wp:table -->

<!-- wp:paragraph -->
<p>I wanted to discharge the battery completely, but when the battery gets empty, the indicator starts to blink and the throttle is almost gone, a small assist is still there. I'm not sure how long you can drive with a blinking battery indicator, but at that point, it's mostly only you. The headlight stays on.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Car trunk-test</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>I drive Volvo S80, the trunk is big enough for a folded bike and Ninebot scooter, and there is still room for some bags. </p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Notes from bike service</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Misaligned breaks, highest and lowest gears were a bit hard to get sometimes.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Breaks - these bikes are not the highest quality, and break holders are welded at a small angle, which leads to breaks not connecting properly, some adjustments can be done, but it will never be perfect.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Gears - for this bike, Shimano is more for a name, not quality. The smaller gear shifter wears faster and is not powerful enough to shift fast. Slow down pedaling and hold shift up handle for 1 second to fully and easy shift.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Things that I miss</h2>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><!-- wp:list-item -->
<li>Handle for carrying - the bike is small and can be easily folded, but it would be great to have some handles for carrying.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Ignition key - right now you just need to press a button and you are ready to go. Since this bike is not that cheap, an ignition key or some other protection would be nice.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Summary</p>
<!-- /wp:paragraph -->

<!-- wp:pullquote -->
<figure class="wp-block-pullquote"><blockquote><p>Don't buy an electric bike with one gear!</p></blockquote></figure>
<!-- /wp:pullquote -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>129</wp:post_id>
		<wp:post_date><![CDATA[2023-05-25 13:43:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2023-05-25 13:43:17]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2023-05-25 13:43:17]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[ct_author_last_updated]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[ASP.NET CORE Integration tests: Entity framework DB first]]></title>
		<link>https://floatincode.net/2021/05/10/asp-net-core-integration-tests-entity-framework-db-first/</link>
		<pubDate>Mon, 10 May 2021 06:10:52 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/?p=142</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>In this short blog post I want to show how useful EF DB first approach is when testing. While working with legacy project you might now have endpoints to set all data in DB for test, also validating exact data in DB get easier.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Generate code from the database</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Install two Nuget packages in a project that will contain DB files: <a rel="noreferrer noopener" href="https://www.nuget.org/packages/Microsoft.EntityFrameworkCore.Design/" data-type="URL" data-id="https://www.nuget.org/packages/Microsoft.EntityFrameworkCore.Design/" target="_blank">Microsoft.EntityFrameworkCore.Design</a> and <a rel="noreferrer noopener" href="https://www.nuget.org/packages/Npgsql.EntityFrameworkCore.PostgreSQL/6.0.0-preview3" data-type="URL" data-id="https://www.nuget.org/packages/Npgsql.EntityFrameworkCore.PostgreSQL/6.0.0-preview3" target="_blank">Npgsql.EntityFrameworkCore.PostgreSQL</a> don't forget to rebuild the solution.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Next install <a rel="noreferrer noopener" href="https://docs.microsoft.com/en-us/ef/core/cli/dotnet" data-type="URL" data-id="https://docs.microsoft.com/en-us/ef/core/cli/dotnet" target="_blank">dotnet-ef</a> global tool and invoke it with following configuration. Tool has variety of configuration parameters, but for the sake of simplicity we will use only minimal set.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre title="generate.cmd" class="wp-block-code"><code lang="bash" class="language-bash">dotnet&nbsp;ef&nbsp;dbcontext&nbsp;scaffold&nbsp;"Server=127.0.0.1;Port=6444;Database=weather;User&nbsp;Id=admin_user;Password=secretPassword123!;"&nbsp;Npgsql.EntityFrameworkCore.PostgreSQL&nbsp;--output-dir&nbsp;Weather&nbsp;--no-onconfiguring&nbsp;--force</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>At this point we should have all necessary files to change dapper into EF.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Only a few changes are needed, create DataAccess inject database string, and use an entity framework in your project or tests. Source code is always available at <a rel="noreferrer noopener" href="https://github.com/FloatInCodeBlog/ApiIntegrationTests/tree/entity-framework-db-first" data-type="URL" data-id="https://github.com/FloatInCodeBlog/ApiIntegrationTests/tree/entity-framework-db-first" target="_blank">GitHub</a></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>In memory</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Why ? If someone is using EF code first on enterprise, please let me know how it's going.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Summary</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>I find Entity Framework is really helpful in tests, you can easily add data to DB and validate if tests performed correct changes to DB. When the database changes, you only need to run <code>generate.cmd</code> script to update all code and if there are issues, they are in compile-time, which makes maintenance and updates easy. </p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>142</wp:post_id>
		<wp:post_date><![CDATA[2021-05-10 06:10:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-05-10 06:10:52]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-05-10 06:10:53]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-05-10 06:10:53]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[asp-net-core-integration-tests-entity-framework-db-first]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="api"><![CDATA[API]]></category>
		<category domain="post_tag" nicename="c-sharp"><![CDATA[C#]]></category>
		<category domain="post_tag" nicename="database"><![CDATA[database]]></category>
		<category domain="post_tag" nicename="db-first"><![CDATA[DB-First]]></category>
		<category domain="post_tag" nicename="entityframework"><![CDATA[EntityFramework]]></category>
		<category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
		<category domain="post_tag" nicename="testing"><![CDATA[testing]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[ct_author_last_updated]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021-05-08]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Reading list]]></title>
		<link>https://floatincode.net/?p=257</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/?p=257</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><a href="https://jayriverlong.github.io/2021/07/05/movies.html">No More Movies | Jay Riverlong</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="http://www.learning-to-see.co.uk/how-to-get-better-at-painting-without-painting-anything">How To Get Better at Painting – Without Painting Anything (learning-to-see.co.uk)</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://news.ycombinator.com/item?id=27735292">How to get better at painting without painting anything (2015) | Hacker News (ycombinator.com)</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://www.atomiccommits.io/everything-useful-i-know-about-kubectl/">Everything Useful I Know About kubectl&nbsp;— Atomic Commits</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://news.ycombinator.com/item?id=27737064">Everything useful I know about kubectl | Hacker News (ycombinator.com)</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://devblogs.microsoft.com/dotnet/date-time-and-time-zone-enhancements-in-net-6/">Date, Time, and Time Zone Enhancements in .NET 6 | .NET Blog (microsoft.com)</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://github.com/MapsterMapper/Mapster">MapsterMapper/Mapster: A fast, fun and stimulating object to object Mapper (github.com)</a> - automapper vs mappster</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>257</wp:post_id>
		<wp:post_date><![CDATA[2021-07-09 18:39:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-07-09 18:39:53]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-07-09 18:39:53]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[ct_author_last_updated]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Book reading list]]></title>
		<link>https://floatincode.net/?p=329</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/?p=329</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:media-text {"mediaId":330,"mediaLink":"https://floatincode.net/?attachment_id=330","mediaType":"image","mediaWidth":21} -->
<div class="wp-block-media-text alignwide is-stacked-on-mobile" style="grid-template-columns:21% auto"><figure class="wp-block-media-text__media"><img src="https://floatincode.net/wp-content/uploads/2021/08/ASP.NET-Core-5-Secure-Coding-Cookbook.jpg" alt="" class="wp-image-330 size-full"/></figure><div class="wp-block-media-text__content"><!-- wp:paragraph {"placeholder":"Content…","fontSize":"large"} -->
<p class="has-large-font-size"> ASP.NET Core 5 Secure Coding Cookbook </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p> 324 pages </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p> One chapter covers security problem, how to reproduce it and how to fix it. Possible to read single chapters, do some exercises practise it.  </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p> Chapter code available at <a rel="noreferrer noopener" href="https://github.com/PacktPublishing/ASP.NET-Core-Secure-Coding-Cookbook" data-type="URL" data-id="https://github.com/PacktPublishing/ASP.NET-Core-Secure-Coding-Cookbook" target="_blank">github</a> </p>
<!-- /wp:paragraph --></div></div>
<!-- /wp:media-text -->

<!-- wp:media-text {"mediaId":332,"mediaLink":"https://floatincode.net/?attachment_id=332","mediaType":"image","mediaWidth":21} -->
<div class="wp-block-media-text alignwide is-stacked-on-mobile" style="grid-template-columns:21% auto"><figure class="wp-block-media-text__media"><img src="https://floatincode.net/wp-content/uploads/2021/08/The-Programmers-Brain-817x1024.png" alt="" class="wp-image-332 size-full"/></figure><div class="wp-block-media-text__content"><!-- wp:paragraph {"placeholder":"Content…","fontSize":"large"} -->
<p class="has-large-font-size">The Programmer’s Brain</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>275 pages</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Not only about programming, but in general how thought process works, how to use mental models to scan code, how short and long term memory works. Speed reading code.</p>
<!-- /wp:paragraph --></div></div>
<!-- /wp:media-text -->

<!-- wp:media-text {"mediaId":336,"mediaLink":"https://floatincode.net/?attachment_id=336","mediaType":"image","mediaWidth":19} -->
<div class="wp-block-media-text alignwide is-stacked-on-mobile" style="grid-template-columns:19% auto"><figure class="wp-block-media-text__media"><img src="https://floatincode.net/wp-content/uploads/2021/08/Learning-Algorithms.jpg" alt="" class="wp-image-336 size-full"/></figure><div class="wp-block-media-text__content"><!-- wp:paragraph {"placeholder":"Content…","fontSize":"large"} -->
<p class="has-large-font-size">Learning Algorithms</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>280 pages</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>After quick glimpse - beautifully visual algorithm descriptions</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://www.wowebook.org/learning-algorithms/">Learning Algorithms - Free PDF Download (wowebook.org)</a></p>
<!-- /wp:paragraph --></div></div>
<!-- /wp:media-text -->

<!-- wp:media-text {"mediaId":334,"mediaLink":"https://floatincode.net/?attachment_id=334","mediaType":"image","mediaWidth":20} -->
<div class="wp-block-media-text alignwide is-stacked-on-mobile" style="grid-template-columns:20% auto"><figure class="wp-block-media-text__media"><img src="https://floatincode.net/wp-content/uploads/2021/08/Good-Code-Bad-Code-817x1024.png" alt="" class="wp-image-334 size-full"/></figure><div class="wp-block-media-text__content"><!-- wp:paragraph {"placeholder":"Content…","fontSize":"large"} -->
<p class="has-large-font-size">The Programmer’s Brain</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>256&nbsp; pages</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Clean code, might be good, need to quickly go through it and see what catches eye.</p>
<!-- /wp:paragraph --></div></div>
<!-- /wp:media-text -->

<!-- wp:media-text {"mediaId":339,"mediaLink":"https://floatincode.net/?attachment_id=339","mediaType":"image","mediaWidth":20} -->
<div class="wp-block-media-text alignwide is-stacked-on-mobile" style="grid-template-columns:20% auto"><figure class="wp-block-media-text__media"><img src="https://floatincode.net/wp-content/uploads/2021/08/Cracking-the-Coding-Interview.jpg" alt="" class="wp-image-339 size-full"/></figure><div class="wp-block-media-text__content"><!-- wp:paragraph {"placeholder":"Content…","fontSize":"large"} -->
<p class="has-large-font-size">Cracking the Coding Interview</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>687 pages</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Most of the pages are about problems and solutions. Look more into questions to ask and questions to expect and prepare.</p>
<!-- /wp:paragraph --></div></div>
<!-- /wp:media-text -->

<!-- wp:media-text {"mediaId":341,"mediaLink":"https://floatincode.net/?attachment_id=341","mediaType":"image","mediaWidth":20} -->
<div class="wp-block-media-text alignwide is-stacked-on-mobile" style="grid-template-columns:20% auto"><figure class="wp-block-media-text__media"><img src="https://floatincode.net/wp-content/uploads/2021/08/Developing-Modern-Database-Applications-with-PostgreSQL.webp" alt="" class="wp-image-341 size-full"/></figure><div class="wp-block-media-text__content"><!-- wp:paragraph {"placeholder":"Content…","fontSize":"large"} -->
<p class="has-large-font-size">Developing Modern Database Applications with PostgreSQL</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>428 pages</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Has angular app, geospatial app examples, also testing with different approaches (inside database itself and outside with python), includes how to generate API with PostgREST</p>
<!-- /wp:paragraph --></div></div>
<!-- /wp:media-text -->

<!-- wp:media-text {"mediaId":344,"mediaLink":"https://floatincode.net/?attachment_id=344","mediaType":"image","mediaWidth":18} -->
<div class="wp-block-media-text alignwide is-stacked-on-mobile" style="grid-template-columns:18% auto"><figure class="wp-block-media-text__media"><img src="https://floatincode.net/wp-content/uploads/2021/08/JavaScript-Cookbook-3rd-Edition.jpg" alt="" class="wp-image-344 size-full"/></figure><div class="wp-block-media-text__content"><!-- wp:paragraph {"placeholder":"Content…","fontSize":"large"} -->
<p class="has-large-font-size">JavaScript Cookbook, 3rd Edition</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Looks like a good book about js</p>
<!-- /wp:paragraph --></div></div>
<!-- /wp:media-text -->

<!-- wp:media-text {"mediaId":346,"mediaLink":"https://floatincode.net/?attachment_id=346","mediaType":"image","mediaWidth":20} -->
<div class="wp-block-media-text alignwide is-stacked-on-mobile" style="grid-template-columns:20% auto"><figure class="wp-block-media-text__media"><img src="https://floatincode.net/wp-content/uploads/2021/08/The-TypeScript-Workshop.jpg" alt="" class="wp-image-346 size-full"/></figure><div class="wp-block-media-text__content"><!-- wp:paragraph {"placeholder":"Content…","fontSize":"large"} -->
<p class="has-large-font-size">The TypeScript Workshop</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>730 pages</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Each topic is split into small pieces with examples - this increases size drastically. Should be good for references, has lots of examples and exercises.</p>
<!-- /wp:paragraph --></div></div>
<!-- /wp:media-text -->

<!-- wp:media-text {"mediaId":348,"mediaLink":"https://floatincode.net/?attachment_id=348","mediaType":"image","mediaWidth":20} -->
<div class="wp-block-media-text alignwide is-stacked-on-mobile" style="grid-template-columns:20% auto"><figure class="wp-block-media-text__media"><img src="https://floatincode.net/wp-content/uploads/2021/08/Angular-Cookbook.jpg" alt="" class="wp-image-348 size-full"/></figure><div class="wp-block-media-text__content"><!-- wp:paragraph {"placeholder":"Content…","fontSize":"large"} -->
<p class="has-large-font-size">Angular Cookbook: Over 80 Actionable Recipes Every Angular Developer Should Know</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Has state management, unit tests, E2E tests</p>
<!-- /wp:paragraph --></div></div>
<!-- /wp:media-text -->

<!-- wp:media-text {"mediaId":350,"mediaLink":"https://floatincode.net/?attachment_id=350","mediaType":"image","mediaWidth":18} -->
<div class="wp-block-media-text alignwide is-stacked-on-mobile" style="grid-template-columns:18% auto"><figure class="wp-block-media-text__media"><img src="https://floatincode.net/wp-content/uploads/2021/08/Scala-Cookbook-2nd-Edition.jpg" alt="" class="wp-image-350 size-full"/></figure><div class="wp-block-media-text__content"><!-- wp:paragraph {"placeholder":"Content…","fontSize":"large"} -->
<p class="has-large-font-size">Scala Cookbook, 2nd Edition</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>802 pages</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph --></div></div>
<!-- /wp:media-text -->

<!-- wp:media-text {"mediaId":351,"mediaLink":"https://floatincode.net/?attachment_id=351","mediaType":"image","mediaWidth":18} -->
<div class="wp-block-media-text alignwide is-stacked-on-mobile" style="grid-template-columns:18% auto"><figure class="wp-block-media-text__media"><img src="https://floatincode.net/wp-content/uploads/2021/08/Python-Distilled.jpg" alt="" class="wp-image-351 size-full"/></figure><div class="wp-block-media-text__content"><!-- wp:paragraph {"placeholder":"Content…","fontSize":"large"} -->
<p class="has-large-font-size">Python Distilled</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>352 pages</p>
<!-- /wp:paragraph --></div></div>
<!-- /wp:media-text -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>329</wp:post_id>
		<wp:post_date><![CDATA[2021-08-20 05:53:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-08-20 05:53:08]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-08-20 05:53:08]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[ct_author_last_updated]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[image-5]]></title>
		<link>https://floatincode.net/2021/10/04/debugging-only-building-docker-image-extra-npm-packages-are-downloaded/image-5-2/</link>
		<pubDate>Wed, 22 Sep 2021 14:21:16 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/wp-content/uploads/2021/09/image-5.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>379</wp:post_id>
		<wp:post_date><![CDATA[2021-09-22 14:21:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-09-22 14:21:16]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-09-22 14:21:16]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-09-22 14:21:16]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-5-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>372</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://floatincode.net/wp-content/uploads/2021/09/image-5.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/09/image-5.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1359;s:6:"height";i:721;s:4:"file";s:19:"2021/09/image-5.png";s:5:"sizes";a:4:{s:6:"medium";a:4:{s:4:"file";s:19:"image-5-300x159.png";s:5:"width";i:300;s:6:"height";i:159;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:20:"image-5-1024x543.png";s:5:"width";i:1024;s:6:"height";i:543;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:19:"image-5-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:19:"image-5-768x407.png";s:5:"width";i:768;s:6:"height";i:407;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Reverse proxy Azure Blob downloads with authentication]]></title>
		<link>https://floatincode.net/?p=420</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/?p=420</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>How to download Azure Blob using an HTTP request</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Method: GET</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre title="File download URL structure" class="wp-block-code"><code lang="bash" class="language-bash">https://{ACOUNT_NAME}.blob.core.windows.net/{CONTAINER}/{PATH_IN_STORAGE}/{FILENAME}.{FILE_EXTENSION}</code></pre>
<!-- /wp:code -->

<!-- wp:code -->
<pre title="File download URL example" class="wp-block-code"><code lang="bash" class="language-bash">https://PhotoBlobs.blob.core.windows.net/personal-photos/2022/08/image001.jpg</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3>Headers:</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>x-ms-date - Current date time, example: Thu, 25 Aug 2022 07:46:06 GMT</li><li>x-ms-version - Static value: 2017-04-17</li><li>Authorization - Request hash: {ACCOUNT_NAME}:{REQUEST_HASH}</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":432,"sizeSlug":"full","linkDestination":"none"} -->
<figure class="wp-block-image size-full"><img src="https://floatincode.net/wp-content/uploads/2022/08/image.png" alt="" class="wp-image-432"/><figcaption>Azure Blob download request in Postman</figcaption></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3>Authorization</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The most complex part is to get Authorization SharedKey, which is generated from the entire HTTP request + AccountKey + AccountName.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://github.com/Azure-Samples/storage-dotnet-rest-api-with-auth/blob/master/StorageRestApiAuth/AzureStorageAuthenticationHelper.cs">storage-dotnet-rest-api-with-auth/AzureStorageAuthenticationHelper.cs at master · Azure-Samples/storage-dotnet-rest-api-with-auth (github.com)</a></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre title="Apply authorization header" class="wp-block-code"><code lang="csharp" class="language-csharp">DateTime now = DateTime.UtcNow;
httpRequestMessage.Headers.Add("x-ms-date", now.ToString("R", CultureInfo.InvariantCulture));
httpRequestMessage.Headers.Add("x-ms-version", "2017-04-17");
// If you need any additional headers, add them here before creating
//   the authorization header. 

// Add the authorization header.
httpRequestMessage.Headers.Authorization = AzureStorageAuthenticationHelper.GetAuthorizationHeader(storageAccountName, storageAccountKey, now, httpRequestMessage);</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>Reverse proxy HTTP requests to Azure Blob storage</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>For reverse proxy, we will be using <a rel="noreferrer noopener" href="https://github.com/microsoft/reverse-proxy" data-type="URL" data-id="https://github.com/microsoft/reverse-proxy" target="_blank">Yarp.ReverseProxy</a></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre title="appsettings.json changes for reverse proxy" class="wp-block-code"><code lang="json" class="language-json">"ReverseProxy": {
    "Routes": {
        "blobRoute": {
            "AuthorizationPolicy": "authenticatedPolicy",
            "ClusterId": "azureBlobStorageCluster",
            "Match": {
                "Path": "/v1/photos/{**blobUrl}"
            },
            "Transforms": [
                {
                    "PathPattern": "{**blobUrl}"
                }
            ]
        }
    },
    "Clusters": {
        "azureBlobStorageCluster": {
            "Destinations": {
                "destination1": {
                    "Address": "urlIsBuiltInReverseProxyConfiguration"
                }
            }
        }
    }
}</code></pre>
<!-- /wp:code -->

<!-- wp:code -->
<pre title="Startup.cs changes for reverse proxy" class="wp-block-code"><code lang="csharp" class="language-csharp">public void ConfigureServices(IServiceCollection services)
{
    //Some parts have been removed for clarity
        
    services.AddAuthorization(options =>
    {
        options.AddPolicy("authenticatedPolicy", policy =>
            policy.RequireAuthenticatedUser());
    });

    services.AddBlobReverseProxy(Configuration);

}


public void Configure(IApplicationBuilder app, IWebHostEnvironment env, SettingsLoggingService settingsLogging)
{
    //Some parts have been removed for clarity

    app.UseEndpoints(endpoints =>
    {
        endpoints.MapControllers();
        endpoints.MapReverseProxy();
    });

}</code></pre>
<!-- /wp:code -->

<!-- wp:code -->
<pre title="Reverse proxy configuration" class="wp-block-code"><code lang="csharp" class="language-csharp">public static class ReverseProxyConfiguration
{
    public static void AddBlobReverseProxy(this IServiceCollection services, IConfiguration configuration)
    {
        var proxyBuilder = services.AddReverseProxy();
        proxyBuilder.LoadFromConfig(configuration.GetSection("ReverseProxy"))
            .AddTransforms(context =>
            {
                var azureSettings = context.Services.GetRequiredService&lt;IOptions&lt;StorageSettings>>();

                var storageAccount = CloudStorageAccount.Parse(azureSettings.Value.ConnectionString);
                var baseUrl = $"{storageAccount.BlobEndpoint}{azureSettings.Value.Container}/";

                context.AddRequestTransform(AddAzureBlobAuthentication(baseUrl));
            });
    }

    private static Func&lt;RequestTransformContext, ValueTask> AddAzureBlobAuthentication(string baseUrl)
    {
        return requestContext =>
        {
            var requestedFilePath = requestContext.Path.ToString().Trim('/');

            requestContext.ProxyRequest.RequestUri = new Uri(baseUrl + requestedFilePath);
            requestContext.ProxyRequest.Headers.Add("x-ms-date", DateTime.UtcNow.ToString("R", CultureInfo.InvariantCulture));
            requestContext.ProxyRequest.Headers.Add("x-ms-version", "2017-04-17");

            requestContext.ProxyRequest.Headers.Authorization = AzureStorageAuthenticationHelper.GetAuthorizationHeader(
                   "storageAccountName", "storageAccountKey", DateTime.UtcNow, requestContext.ProxyRequest);

            return ValueTask.CompletedTask;
        };
    }
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>420</wp:post_id>
		<wp:post_date><![CDATA[2022-08-30 07:39:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2022-08-30 07:39:51]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2022-08-30 07:39:51]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_36cd3a22cf6d22e14d488366436a90a8]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[ct_author_last_updated]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[image]]></title>
		<link>https://floatincode.net/?attachment_id=432</link>
		<pubDate>Tue, 30 Aug 2022 06:19:26 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/wp-content/uploads/2022/08/image.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>432</wp:post_id>
		<wp:post_date><![CDATA[2022-08-30 06:19:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2022-08-30 06:19:26]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2022-08-30 06:19:26]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2022-08-30 06:19:26]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-18]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>420</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://floatincode.net/wp-content/uploads/2022/08/image.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2022/08/image.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";i:819;s:6:"height";i:290;s:4:"file";s:17:"2022/08/image.png";s:8:"filesize";i:26083;s:5:"sizes";a:3:{s:6:"medium";a:5:{s:4:"file";s:17:"image-300x106.png";s:5:"width";i:300;s:6:"height";i:106;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:11207;}s:9:"thumbnail";a:5:{s:4:"file";s:17:"image-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:6405;}s:12:"medium_large";a:5:{s:4:"file";s:17:"image-768x272.png";s:5:"width";i:768;s:6:"height";i:272;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:48810;}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Custom API version selector]]></title>
		<link>https://floatincode.net/2021/08/23/custom-api-version-selector/</link>
		<pubDate>Mon, 23 Aug 2021 06:08:00 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/?p=73</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>In this blog post, I will demonstrate how to write a custom .NET CORE API version selector. While it's easy and libraries provided all the necessary information to do that, you should weigh the pros and cons before doing so. The implementation that I will share below is used in API which communicates with the web and two mobile apps (IOS, Android), while at first, this custom version selection seemed a great idea, after some time it looks more like a ticking time bomb. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Source code at <a rel="noreferrer noopener" href="https://github.com/FloatInCodeBlog/ApiCustomEndpointVersioning" data-type="URL" data-id="https://github.com/FloatInCodeBlog/ApiCustomEndpointVersioning" target="_blank">GitHub</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Implementation</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Install <code>Microsoft.AspNetCore.Mvc.Versioning</code> nuget package.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre title="Two identical methods with different api versions for testing." class="wp-block-code"><code lang="csharp" class="language-csharp">        [HttpGet]
        [ApiVersion("1.0")]
        public WeatherResponse Get()
        {
            var rng = new Random();
            var respones = new WeatherResponse
            {
                Forecasts = Enumerable.Range(1, 5).Select(index =&gt; new WeatherForecast
                {
                    Date = DateTime.Now.AddDays(index),
                    TemperatureC = rng.Next(-20, 55),
                    Summary = Summaries[rng.Next(Summaries.Length)]
                }),
                ApiVersion = "1.0"
            };

            return respones;
        }

        [HttpGet]
        [ApiVersion("2.0")]
        public WeatherResponse Get_v2()
        {
            var rng = new Random();
            var respones = new WeatherResponse
            {
                Forecasts = Enumerable.Range(1, 5).Select(index =&gt; new WeatherForecast
                {
                    Date = DateTime.Now.AddDays(index),
                    TemperatureC = rng.Next(-20, 55),
                    Summary = Summaries[rng.Next(Summaries.Length)]
                }),
                ApiVersion = "2.0"
            };

            return respones;
        }</code></pre>
<!-- /wp:code -->

<!-- wp:code -->
<pre title="Versioning configuration" class="wp-block-code"><code lang="csharp" class="language-csharp">services.AddApiVersioning(options =&gt;
{
    options.ReportApiVersions = true;
    options.AssumeDefaultVersionWhenUnspecified = true;
    //Important to version reader ALWAYS report version as missing
    options.ApiVersionReader = new HeaderApiVersionReader("custom-version-selection-works-only-if-api-version-is-not-specified");

    options.ApiVersionSelector = new HighestUpToSpecifiedIncludedVersionSelector(new ApiVersion(2, 0));
});</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>ApiVersion</code> has extension to parse version object from string, <code>SelectVersion</code> method has all the information required to decide which method to select. What's left is for us to make decision and implement our custom version selector.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre title="Custom version selection. Select highest up to specified version" class="wp-block-code"><code lang="csharp" class="language-csharp">    public class HighestUpToSpecifiedIncludedVersionSelector : IApiVersionSelector
    {
        private readonly ApiVersion _defaultVersion;

        public HighestUpToSpecifiedIncludedVersionSelector(ApiVersion defaultVersion)
        {
            _defaultVersion = defaultVersion;
        }

        public ApiVersion SelectVersion(HttpRequest request, ApiVersionModel model)
        {
            if (model == null)
                throw new ArgumentNullException(nameof(model));

            var requestedVersion = ParseVersion(request) ?? _defaultVersion;

            var selectedVersion = model.ImplementedApiVersions.Count switch
            {
                0 =&gt; _defaultVersion,
                1 =&gt; model.ImplementedApiVersions[0].Status == null ? model.ImplementedApiVersions[0] : _defaultVersion,
                _ =&gt; model.ImplementedApiVersions
                   .Where(v =&gt; v.Status == null &amp;&amp; v &lt;= requestedVersion)
                   .Max(v =&gt; v) ?? _defaultVersion
            };

            return selectedVersion;
        }

        private static ApiVersion ParseVersion(HttpRequest request)
        {
            if (!request.Headers.TryGetValue("api-version", out var version))
                return null;

            if (string.IsNullOrEmpty(version) || version.Count != 1)
                return null;

            return ApiVersion.TryParse(version[0], out var apiVersion) ? apiVersion : null;
        }
    }</code></pre>
<!-- /wp:code -->

<!-- wp:image {"id":316,"sizeSlug":"full","linkDestination":"none"} -->
<figure class="wp-block-image size-full"><img src="https://floatincode.net/wp-content/uploads/2021/08/image.png" alt="" class="wp-image-316"/><figcaption>Sending request without version will execute default version endpoint, which in this case is 2.0</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":317,"width":645,"height":326,"sizeSlug":"full","linkDestination":"none"} -->
<figure class="wp-block-image size-full is-resized"><img src="https://floatincode.net/wp-content/uploads/2021/08/image-1.png" alt="" class="wp-image-317" width="645" height="326"/><figcaption>Specifying version that doesn't exist we get smallest up to that version, in this case it's 1.0</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Summary</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>We used this approach in mobile application. Would I use it again ? No. As of right now we don't make any breaking changes to the API, only small bug fixes. With this versioning style, if we already have v2.0 endpoint and mobile app is using it, we can't create new v2.0 endpoint for other controller, if we do, mobile app will start to use it immediately and will break.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It's good to know that you can change version selection, but it's best to fail if endpoint or version is not found.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>73</wp:post_id>
		<wp:post_date><![CDATA[2021-08-23 06:08:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-08-23 06:08:00]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-08-14 06:24:42]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-08-14 06:24:42]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[custom-api-version-selector]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="net"><![CDATA[.NET]]></category>
		<category domain="post_tag" nicename="api"><![CDATA[API]]></category>
		<category domain="post_tag" nicename="c-sharp"><![CDATA[C#]]></category>
		<category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
		<category domain="post_tag" nicename="versioning"><![CDATA[Versioning]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[ct_author_last_updated]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[.NET Transaction scope]]></title>
		<link>https://floatincode.net/2021/09/06/transaction-scope/</link>
		<pubDate>Mon, 06 Sep 2021 06:30:00 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/?p=75</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>This blog post was moved from the old blog.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>One way to learn something new is to write unit tests exploring a new library, that is what I'll be doing in this blog post. For tests, we will use xUnit and for database Npgsql.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Let's explore different use cases of transaction scope. We will see how transactions behave when they are nested and how exceptions are handled on different nesting levels.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Since we are using async/await workflow we need to enable&nbsp;<code>TransactionScopeAsyncFlowOption.Enabled</code>&nbsp;on our transactions.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Enable transaction scope</h2>
<!-- /wp:heading -->

<!-- wp:list {"ordered":true} -->
<ol><li>Include&nbsp;<code>Enlist=true</code>&nbsp;in your connection string.</li><li>Call&nbsp;<code>connection.EnlistTransaction(Transaction.Current);</code></li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Newer versions of Npgsql have enlisting enabled by default.&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Setup functions and constants used throughout testing</h2>
<!-- /wp:heading -->

<!-- wp:code -->
<pre title="Test setup and configuration" class="wp-block-code"><code lang="csharp" class="language-csharp">private readonly string ConnectionString = "DATABASE=transaction_test;PORT=5432;USER ID=postgres;PASSWORD=postgres;HOST=localhost;";

private readonly string InsertTableAEntryQuery = @"INSERT INTO public.TestTableA(value) VALUES (@value);";
private readonly string InsertTableBEntryQuery = @"INSERT INTO public.TestTableB(value) VALUES (@value);";

private readonly string TableARowCountQuery = @"SELECT count(*) FROM public.TestTableA;";
private readonly string TableBRowCountQuery = @"SELECT count(*) FROM public.TestTableB;";

private async Task ClearDatabase()
{
    await using var connection = new NpgsqlConnection(this.ConnectionString);

    await connection.ExecuteAsync("DELETE FROM public.TestTableA");
    await connection.ExecuteAsync("DELETE FROM public.TestTableB");
}

private async Task&lt;int&gt; TableARowCount()
{
    await using var connection = new NpgsqlConnection(ConnectionString);
    return await connection.QuerySingleAsync&lt;int&gt;(TableARowCountQuery);
}

private async Task&lt;int&gt; TableBRowCount()
{
    await using var connection = new NpgsqlConnection(ConnectionString);
    return await connection.QuerySingleAsync&lt;int&gt;(TableBRowCountQuery);
}

private async Task ThrowException()
{
    await using var connection = new NpgsqlConnection(this.ConnectionString);
    using var scope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled);
    throw new Exception();
}
</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>White smoke test to make sure we have everything setup correctly</h2>
<!-- /wp:heading -->

<!-- wp:code -->
<pre title="Simple test to make sure everything is connected and working." class="wp-block-code"><code class="">[Fact]
public async Task ConnectionIsWorking()
{
    await ClearDatabase();
    await using var connection = new NpgsqlConnection(ConnectionString);

    // Note: no need to open connection
    // Dapper will open it for us

    await connection.ExecuteAsync(InsertTableAEntryQuery, new { value = 123 });
    await connection.ExecuteAsync(InsertTableBEntryQuery, new { value = 321 });

    Assert.Equal(1, await TableARowCount());
    Assert.Equal(1, await TableBRowCount());
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Throwing exception before transaction complete should roll back transaction</h2>
<!-- /wp:heading -->

<!-- wp:code -->
<pre title="Simple test to see if changes are rolled back if exception is thrown." class="wp-block-code"><code class="">[Fact]
public async Task SimpleTransactionRollbackOnException()
{
    await ClearDatabase();

    using (var scope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
    {
        try
        {
            await using var connection = new NpgsqlConnection(ConnectionString);

            await connection.ExecuteAsync(InsertTableAEntryQuery, new { value = 123 });

            await ThrowException();

            scope.Complete();
        }
        catch { }
    }

    Assert.Equal(0, await TableARowCount());
    Assert.Equal(0, await TableBRowCount());
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Even if we catch exception, we still can't complete transaction since connection state is set to aborted</h2>
<!-- /wp:heading -->

<!-- wp:code -->
<pre title="Exceptions inside transaction will prevent its completion." class="wp-block-code"><code class="">[Fact]
public async Task SimpleTransactionRollbackOnException2()
{
    await ClearDatabase();
    try
    {
        using var scope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled);
        await using var connection2 = new NpgsqlConnection(ConnectionString);

        try
        {
            await using var connection = new NpgsqlConnection(ConnectionString);
            await connection.ExecuteAsync(InsertTableAEntryQuery, new { value = 123 });

            await ThrowException();

        }
        catch { }

        scope.Complete();
    }
    catch (TransactionAbortedException)
    {
        Assert.True(true);
    }
    catch
    {
        Assert.True(false);
    }
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Forgetting to call Complete will fail to save changes silently</h2>
<!-- /wp:heading -->

<!-- wp:code -->
<pre title="Transactions must be completed explicitly in order to persist changes" class="wp-block-code"><code class="">[Fact]
public async Task SimpleTransactionRollbackWithoutComplete()
{
    await ClearDatabase();

    using (var scope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
    {
        await using var connection = new NpgsqlConnection(ConnectionString);

        await connection.ExecuteAsync(InsertTableAEntryQuery, new { value = 123 });
        await connection.ExecuteAsync(InsertTableBEntryQuery, new { value = 321 });

        //Forgot to call complete
        //scope.Complete();
    }

    Assert.Equal(0, await TableARowCount());
    Assert.Equal(0, await TableBRowCount());
}

</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Nesting transaction scopes and having multiple complete functions will work fine</h2>
<!-- /wp:heading -->

<!-- wp:code -->
<pre title="Transactions can be nested." class="wp-block-code"><code class="">[Fact]
public async Task NestedTransactionsBothHavingComplete()
{
    await ClearDatabase();

    using (var scope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
    {
        await using var connection = new NpgsqlConnection(ConnectionString);

        await connection.ExecuteAsync(InsertTableAEntryQuery, new { value = 123 });

        await NestedTransactionWithCompleteInside();

        scope.Complete();
    }

    Assert.Equal(1, await TableARowCount());
    Assert.Equal(1, await TableBRowCount());
}

private async Task NestedTransactionWithCompleteInside()
{
    using var scope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled);
    await using var connection = new NpgsqlConnection(ConnectionString);

    await connection.ExecuteAsync(InsertTableBEntryQuery, new { value = 321 });

    scope.Complete();
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Root transaction will fail when nested transaction isn't completed</h2>
<!-- /wp:heading -->

<!-- wp:code -->
<pre title="All transactions must be completed explicitly" class="wp-block-code"><code class="">[Fact]
public async Task NestedTransactionsOnlyRootWithComplete()
{
    await ClearDatabase();

    try
    {
        using var scope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled);
        await using var connection = new NpgsqlConnection(ConnectionString);

        await connection.ExecuteAsync(InsertTableAEntryQuery, new { value = 123 });

        await NestedTransactionWithoutCompleteInside();

        scope.Complete();
    }
    catch (TransactionAbortedException)
    {
        Assert.True(true);
    }
    catch
    {
        Assert.True(false);
    }
}

private async Task NestedTransactionWithoutCompleteInside()
{
    using var scope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled);
    await using var connection = new NpgsqlConnection(ConnectionString);

    await connection.ExecuteAsync(InsertTableBEntryQuery, new { value = 321 });
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Summary</h2>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>If we nest transactions, all of them succeed or all of them will fail.</li><li>Don't forget to call transaction scope complete method.</li><li>Transaction complete method will fail if connection is in invalid state due to exception.</li></ul>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>75</wp:post_id>
		<wp:post_date><![CDATA[2021-09-06 06:30:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-09-06 06:30:00]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-08-28 07:37:07]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-08-28 07:37:07]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[transaction-scope]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="net"><![CDATA[.NET]]></category>
		<category domain="post_tag" nicename="c-sharp"><![CDATA[C#]]></category>
		<category domain="post_tag" nicename="database"><![CDATA[database]]></category>
		<category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
		<category domain="post_tag" nicename="testing"><![CDATA[testing]]></category>
		<category domain="post_tag" nicename="transaction"><![CDATA[transaction]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[ct_author_last_updated]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Untitled Reusable Block]]></title>
		<link>https://floatincode.net/2021/03/28/untitled-reusable-block/</link>
		<pubDate>Sun, 28 Mar 2021 14:27:45 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/2021/03/28/untitled-reusable-block/</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:code {"lineNumbers":true} -->
<pre class="wp-block-code"><code lang="csharp" class="language-csharp line-numbers"></code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>84</wp:post_id>
		<wp:post_date><![CDATA[2021-03-28 14:27:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-28 14:27:45]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-03-28 14:27:45]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-03-28 14:27:45]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[untitled-reusable-block]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[wp_block]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title><![CDATA[Untitled Reusable Block]]></title>
		<link>https://floatincode.net/2021/03/28/untitled-reusable-block-2/</link>
		<pubDate>Sun, 28 Mar 2021 14:30:16 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/2021/03/28/untitled-reusable-block-2/</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:code -->
<pre class="wp-block-code"><code class=""></code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>87</wp:post_id>
		<wp:post_date><![CDATA[2021-03-28 14:30:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-28 14:30:16]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-03-28 14:30:16]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-03-28 14:30:16]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[untitled-reusable-block-2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[wp_block]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title><![CDATA[Untitled Reusable Block]]></title>
		<link>https://floatincode.net/2021/03/29/untitled-reusable-block-3/</link>
		<pubDate>Mon, 29 Mar 2021 03:33:15 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/2021/03/29/untitled-reusable-block-3/</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>This blog post is a part of series about integration testing ASP.NET Core API with database.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>109</wp:post_id>
		<wp:post_date><![CDATA[2021-03-29 03:33:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-29 03:33:15]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-03-29 03:33:15]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-03-29 03:33:15]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[untitled-reusable-block-3]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[wp_block]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title><![CDATA[ASP.NET CORE Required property validation]]></title>
		<link>https://floatincode.net/2021/06/26/asp-net-core-required-property-validation/</link>
		<pubDate>Sat, 26 Jun 2021 13:07:58 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/?p=173</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>System.ComponentModel.DataAnnotations.<strong>Required</strong> validation doesn't work how most people imagine it working. Required - it does have value, if the property is nullable and value is null - this validation will fail. However, if we have value type property - then we always have value, and required validation never fails.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":191,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://floatincode.net/wp-content/uploads/2021/06/JsonAndDataAnnotationPropertyValidation.png" alt="Data annotation validation is invoked after model binder, which means that if property is value type will be created with default value and required validation never fails." class="wp-image-191"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Model binder creates an empty model and assigns values from JSON. If a JSON value is missing for enum or integer - we will get default value, and sometimes this is not desired behavior. We can approach this problem from two sides, we can make value types nullable or we can use JSON validation and fail inside the model binder.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Lets explore these two validation types by creating small project, start with empty ASP.NET core API project.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Validation with System.ComponentModel.DataAnnotations</h2>
<!-- /wp:heading -->

<!-- wp:code -->
<pre title="Property validation with DataAnnotation " class="wp-block-code"><code lang="csharp" class="language-csharp">using&nbsp;System.ComponentModel.DataAnnotations;

namespace&nbsp;RequiredValidation
{
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;class&nbsp;WeatherModel
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Required]
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;Temperature&nbsp;{&nbsp;get;&nbsp;set;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Required]
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;string&nbsp;Title&nbsp;{&nbsp;get;&nbsp;set;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
}</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>Validation with NewtonsoftJson</h2>
<!-- /wp:heading -->

<!-- wp:code -->
<pre title="Install Newtonsoft Json nuget package" class="wp-block-code"><code lang="xml" class="language-xml">&nbsp;Microsoft.AspNetCore.Mvc.NewtonsoftJson</code></pre>
<!-- /wp:code -->

<!-- wp:code {"lineNumbers":false} -->
<pre title="Register Newtonsof Json as default serializer." class="wp-block-code"><code lang="csharp" class="language-csharp"><code>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;ConfigureServices(IServiceCollection&nbsp;services)
&nbsp;&nbsp;&nbsp;&nbsp;{

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;services
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.AddControllers()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.AddNewtonsoftJson();

</code></code></pre>
<!-- /wp:code -->

<!-- wp:code -->
<pre title="Apply JsonProperty validation attribute" class="wp-block-code"><code lang="csharp" class="language-csharp">using&nbsp;Newtonsoft.Json;

namespace&nbsp;RequiredValidation
{
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;class&nbsp;Weather2Model
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[JsonProperty(Required&nbsp;=&nbsp;Required.Always)]
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;Temperature&nbsp;{&nbsp;get;&nbsp;set;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[JsonProperty(Required&nbsp;=&nbsp;Required.Always)]
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;string&nbsp;Title&nbsp;{&nbsp;get;&nbsp;set;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
}

</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>Endpoints</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Controller endpoints in both cases are identical, no additional changes are needed. To make testing easier I just return same model.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre title="Endpoints for both test cases" class="wp-block-code"><code lang="csharp" class="language-csharp">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[HttpPost]
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Route("Update")]
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;IActionResult&nbsp;UpdateWeather(WeatherModel&nbsp;weather)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Ok(weather);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[HttpPost]
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Route("Update2")]
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;IActionResult&nbsp;UpdateWeather2(Weather2Model&nbsp;weather)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Ok(weather);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>Testing DataAnnotations validation</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Lets start by testing DataAnnotations validation "Update" endpoint.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":193,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://floatincode.net/wp-content/uploads/2021/06/image-713x1024.png" alt="" class="wp-image-193"/><figcaption>If we ignore value type property, it will get default value.</figcaption></figure>
<!-- /wp:image -->

<!-- wp:image {"id":194,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://floatincode.net/wp-content/uploads/2021/06/image-1-577x1024.png" alt="" class="wp-image-194"/><figcaption>If we ignore string property with required attribute, we get error message, as expected.</figcaption></figure>
<!-- /wp:image -->

<!-- wp:heading -->
<h2>Testing JSON property validation</h2>
<!-- /wp:heading -->

<!-- wp:image {"id":195,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://floatincode.net/wp-content/uploads/2021/06/image-2-528x1024.png" alt="" class="wp-image-195"/><figcaption>We get error message when integer is not present in request.</figcaption></figure>
<!-- /wp:image -->

<!-- wp:image {"id":196,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://floatincode.net/wp-content/uploads/2021/06/image-3-503x1024.png" alt="" class="wp-image-196"/><figcaption>Same as above, when string is not present in request we get error message.</figcaption></figure>
<!-- /wp:image -->

<!-- wp:heading -->
<h2>Summary</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Back to C# basics, value types always have a default value - unless they are nullable. Adding required on value type property doesn't make sense since it will be with default value either it's zero or first enum value.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>173</wp:post_id>
		<wp:post_date><![CDATA[2021-06-26 13:07:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-06-26 13:07:58]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-06-28 02:26:27]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-06-28 02:26:27]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[asp-net-core-required-property-validation]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="api"><![CDATA[API]]></category>
		<category domain="post_tag" nicename="c-sharp"><![CDATA[C#]]></category>
		<category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
		<category domain="post_tag" nicename="validation"><![CDATA[validation]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[ct_author_last_updated]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[191]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Pro Windows Subsystem for Linux (WSL) book "review"]]></title>
		<link>https://floatincode.net/2021/07/12/pro-windows-subsystem-for-linux-wsl-book-review/</link>
		<pubDate>Mon, 12 Jul 2021 17:16:00 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/?p=200</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:media-text {"mediaId":219,"mediaLink":"https://floatincode.net/?attachment_id=219","mediaType":"image","mediaWidth":18} -->
<div class="wp-block-media-text alignwide is-stacked-on-mobile" style="grid-template-columns:18% auto"><figure class="wp-block-media-text__media"><img src="https://floatincode.net/wp-content/uploads/2021/06/ProWindowsSubsystemForLinuxWSLCover-767x1024.png" alt="" class="wp-image-219 size-full"/></figure><div class="wp-block-media-text__content"><!-- wp:heading -->
<h2><a rel="noreferrer noopener" target="_blank" href="https://www.amazon.com/gp/product/1484268725/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1484268725&amp;linkCode=as2&amp;tag=blogofthoth-20&amp;linkId=62857a01d0b7be3c9e9dcf19a6a63ef1">Pro Windows Subsystem for Linux (WSL)</a></h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph --></div></div>
<!-- /wp:media-text -->

<!-- wp:paragraph -->
<p>Review is in quotation marks because this is not a full review, this is a summary and tips of what I learned from this book. When reading it my main focus was to improve my Kubernetes, terraform script workflow. Which involve windows file/directory navigation, editing files on WSL, managing WSL distributions.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Default parameters</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>First lets identify which distributions are installed, which are default and make sure we starting them with correct user.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre title="Change default WSL version" class="wp-block-code"><code lang="bash" class="language-bash">wsl.exe --set-default-version 2 </code></pre>
<!-- /wp:code -->

<!-- wp:code -->
<pre title="List all distributions" class="wp-block-code"><code lang="bash" class="language-bash">wsl.exe --list --verbose --all</code></pre>
<!-- /wp:code -->

<!-- wp:code -->
<pre title="All distribution list, asterisk (*) indicates default" class="wp-block-code"><code lang="bash" class="language-bash"> NAME                   STATE           VERSION
* Ubuntu                 Running         2
  docker-desktop-data    Running         2
  docker-desktop         Running         2 </code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Name  - <em>&lt;wsl distro name&gt;</em> in following commands</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre title="Set default WSL distro" class="wp-block-code"><code lang="bash" class="language-bash">wsl.exe --set-default &lt;wsl distro name&gt;</code></pre>
<!-- /wp:code -->

<!-- wp:code -->
<pre title="Change default WSL distribution" class="wp-block-code"><code lang="bash" class="language-bash">wsl.exe --set-version &lt;wsl distro name&gt; 2</code></pre>
<!-- /wp:code -->

<!-- wp:code -->
<pre title="Change default user" class="wp-block-code"><code lang="bash" class="language-bash">&lt;wsl distro name&gt; config --default-user &lt;new user name&gt;</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>File permissions</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Even though file permissions doesn't really fit into what I was looking in this book, wanted to write this down for future reference:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Three groups (&lt;user&gt;&lt;group&gt;&lt;other&gt;):</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>User - by default user who created</li><li>Group - users in a group with assigned access to files</li><li>Other - all other users</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Symbolic form:</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>r - Read</li><li>w - Write</li><li>x - Execute</li><li>- (just dash) for no permission</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Example: rwx-r-xr-</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>rwx - for user</li><li>-r- -for group</li><li>xr- - for other</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Numeric form</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>0 - No permissions, ---</li><li>1 - Execute only, --x</li><li>2 - Write only, -w-</li><li>3 - Write and execute, -wx</li><li>4 - Read, r--</li><li>5 - Read and execute, r-x</li><li>6 - Read and write, rw-</li><li>7 - Read, write and execute, rwx</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Previous example can be written: 745</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Convert between Linux and Windows paths</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>One of the biggest issue for me right now are navigating windows directories in Linux and vice versa.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre title="Convert to windows path (C:\Users\sarun)" class="wp-block-code"><code lang="bash" class="language-bash">wslpath -w /mnt/c/Users/sarun</code></pre>
<!-- /wp:code -->

<!-- wp:code -->
<pre title="Convert to Linux path (/mnt/c/Users/sarun)" class="wp-block-code"><code lang="bash" class="language-bash">wslpath "C:\Users\sarun"</code></pre>
<!-- /wp:code -->

<!-- wp:code -->
<pre title="Open explorer in current directory from linux." class="wp-block-code"><code lang="bash" class="language-bash">explorer.exe .</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>It's also possible to browse all WSL distribution files using File Explorer, navigate to: <code>\\wsl$</code></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Windows X server</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Install x server</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>configuration:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://stackoverflow.com/a/61110604">https://stackoverflow.com/a/61110604</a></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>WSL distribution settings</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre title="Install required packages" class="wp-block-code"><code lang="bash" class="language-bash">sudo apt update
sudo apt install xfce4 xfce4-goodies</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Append following lines to &nbsp;<code>~/.bashrc</code>:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre title="Display forwarding settings" class="wp-block-code"><code lang="bash" class="language-bash">export DISPLAY=$(awk '/nameserver / {print $2; exit}' /etc/resolv.conf 2&gt;/dev/null):0
export LIBGL_ALWAYS_INDIRECT=1</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Reboot WSL distribution.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Windows settings</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Install X Server: <a href="https://sourceforge.net/projects/vcxsrv/">VcXsrv Windows X Server download | SourceForge.net</a></p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":209,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://floatincode.net/wp-content/uploads/2021/06/image-8.png" alt="" class="wp-image-209"/><figcaption>Change VcXsrv launcher DPI settings.</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Start <code>xLaunch.exe</code> and select display settings, most of them are optional and you can choose what you like. "Disable access control" is required, without it WSL distribution can't communicate with host.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":239,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://floatincode.net/wp-content/uploads/2021/06/image-11.png" alt="" class="wp-image-239"/><figcaption>Display settings, I found that multiple windows works best for me.</figcaption></figure>
<!-- /wp:image -->

<!-- wp:image {"id":240,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://floatincode.net/wp-content/uploads/2021/06/image-12.png" alt="" class="wp-image-240"/><figcaption>When new WSL distribution connects, you can execute or start some default applications.</figcaption></figure>
<!-- /wp:image -->

<!-- wp:image {"id":213,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://floatincode.net/wp-content/uploads/2021/06/image-10.png" alt="" class="wp-image-213"/><figcaption>Disable access control must be enabled.</figcaption></figure>
<!-- /wp:image -->

<!-- wp:heading -->
<h2>Running applications</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Now that we have everything set up we can run some applications.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can run individual applications, like <code>xCalc</code></p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":241,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://floatincode.net/wp-content/uploads/2021/06/image-13.png" alt="" class="wp-image-241"/><figcaption>Run individual applications.</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Or you can start full desktop experience by running <code>startxfce4</code></p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":243,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://floatincode.net/wp-content/uploads/2021/06/image-14-1024x537.png" alt="" class="wp-image-243"/><figcaption>Full desktop experience in WSL 2.</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Please note that not all applications will start, some of them might have issues or crash.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Summary</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Considering my initial goal and what this book provided, I'm really happy and would recommend this book. I took only small portion what it provides and will definitely come back to it when my needs increase.  </p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>200</wp:post_id>
		<wp:post_date><![CDATA[2021-07-12 17:16:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-07-12 17:16:00]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-07-17 09:51:10]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-07-17 09:51:10]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[pro-windows-subsystem-for-linux-wsl-book-review]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="bash"><![CDATA[bash]]></category>
		<category domain="post_tag" nicename="book-review"><![CDATA[book-review]]></category>
		<category domain="post_tag" nicename="docker"><![CDATA[docker]]></category>
		<category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
		<category domain="post_tag" nicename="tips"><![CDATA[tips]]></category>
		<category domain="post_tag" nicename="wsl-2"><![CDATA[wsl-2]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[ct_author_last_updated]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021-06-29]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Caprover: best way to deploy .NET and Docker]]></title>
		<link>https://floatincode.net/2021/08/09/caprover-best-way-to-deploy-net-and-docker/</link>
		<pubDate>Mon, 09 Aug 2021 05:36:00 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/?p=252</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Caprover quickly became my favorite server management tool. If you are a solo developer or working in a smaller team, you should definitely give it a try.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>What's included:</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Docker registry - but you can easily connect to any other registry</li><li>Docker build engine - just push your code and Caprover will build and deploy it</li><li>Webhooks - integrate with any Git repository and build\deploy on push</li><li>Server metrics</li><li>Lets Encrypt certificates - Caprover will issue and renew certificates for you</li><li>Custom nginx configs - you are not locked in doing things in only one way, if you need web sockets or extra http headers - you can modify configuration</li><li>One-click-apps - select app from list, enter required variables (name, version ...) and deploy. Similar to  docker-compose where you can run multiple services from single configuration. Also it's easy to create your own one-click-app configurations</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>What's missing</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Logging - to view nginx or other service logs you have to SSH to server</li><li>No build steps - you can't run tests or do anything else, just build and push to registry</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I have been using Caprover for a half year now and moved all my services to it, so right now I have +10 services running, including web apps, databases, WordPress, and more.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Caprover is too simple to write about and its documentation covers all the details, but at the same time Caprover is too important not to mention it.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To find more visit <a rel="noreferrer noopener" href="http://caprover.com" data-type="URL" data-id="caprover.com" target="_blank">Caprover.com</a></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>252</wp:post_id>
		<wp:post_date><![CDATA[2021-08-09 05:36:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-08-09 05:36:00]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-08-04 08:21:58]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-08-04 08:21:58]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[caprover-best-way-to-deploy-net-and-docker]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="net"><![CDATA[.NET]]></category>
		<category domain="post_tag" nicename="continuous-deployment"><![CDATA[continuous-deployment]]></category>
		<category domain="post_tag" nicename="docker"><![CDATA[docker]]></category>
		<category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[ct_author_last_updated]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Mapster: generate dto, async after map actions, dependency injection]]></title>
		<link>https://floatincode.net/2021/07/26/mapster-generate-dto-async-after-map-actions-dependency-injection/</link>
		<pubDate>Mon, 26 Jul 2021 05:35:00 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/?p=261</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><a rel="noreferrer noopener" href="https://github.com/MapsterMapper/Mapster" data-type="URL" data-id="https://github.com/MapsterMapper/Mapster" target="_blank">Mapster </a>brings some new ideas to object mapping world. Model generation, async custom actions after map, dependency injection. In this post, I will try to explore these new ideas. Source code can be found on <a rel="noreferrer noopener" href="https://github.com/floatas/MapsterTest" data-type="URL" data-id="https://github.com/floatas/MapsterTest" target="_blank">GitHub</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Getting started</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In your solution folder run the following commands to enable dotnet tools and install mapster code generator.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre title="Enable dotnet tools in solution directory." class="wp-block-code"><code lang="bash" class="language-bash">dotnet new tool-manifest</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Enabling tool manifest in the solution directory will create a local configuration file, which will help other team members to install the same tools for the project.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre title="Mapster code generation dotnet tool." class="wp-block-code"><code lang="bash" class="language-bash">dotnet tool install Mapster.Tool</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Mapster provides several ways to <a rel="noreferrer noopener" href="https://github.com/MapsterMapper/Mapster/wiki/Mapster.Tool" data-type="URL" data-id="https://github.com/MapsterMapper/Mapster/wiki/Mapster.Tool" target="_blank">generate mapping files</a>, for this example, let's generate automatically after build.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre title="Clean generated files." class="wp-block-code"><code lang="xml" class="language-xml"><code>&nbsp;&nbsp;&nbsp;&nbsp;&lt;ItemGroup&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Generated&nbsp;Include="**\*.g.cs"&nbsp;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/ItemGroup&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;Target&nbsp;Name="CleanGenerated"&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Delete&nbsp;Files="@(Generated)"&nbsp;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/Target&gt;</code></code></pre>
<!-- /wp:code -->

<!-- wp:code -->
<pre title="Generate Mapster mapping files after build." class="wp-block-code"><code lang="xml" class="language-xml">&lt;Target&nbsp;Name="Mapster"&nbsp;AfterTargets="AfterBuild"&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;Exec&nbsp;WorkingDirectory="$(ProjectDir)"&nbsp;Command="dotnet&nbsp;tool&nbsp;restore"&nbsp;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;Exec&nbsp;WorkingDirectory="$(ProjectDir)"&nbsp;Command="dotnet&nbsp;mapster&nbsp;model&nbsp;-a&nbsp;&amp;quot;$(TargetDir)$(ProjectName).dll&amp;quot;"&nbsp;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;Exec&nbsp;WorkingDirectory="$(ProjectDir)"&nbsp;Command="dotnet&nbsp;mapster&nbsp;extension&nbsp;-a&nbsp;&amp;quot;$(TargetDir)$(ProjectName).dll&amp;quot;"&nbsp;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;Exec&nbsp;WorkingDirectory="$(ProjectDir)"&nbsp;Command="dotnet&nbsp;mapster&nbsp;mapper&nbsp;-a&nbsp;&amp;quot;$(TargetDir)$(ProjectName).dll&amp;quot;"&nbsp;/&gt;
&lt;/Target&gt;</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>One thing to keep in mind, code generation is done <strong>after build</strong>. If you change mapster configs and start the project, nothing will change. Correct flow is <strong>build project and then start it</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre title="Mapster.Tool will scan assembly and use config files to generate models." class="wp-block-code"><code lang="csharp" class="language-csharp">&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;class&nbsp;MapsterConfig&nbsp;:&nbsp;ICodeGenerationRegister
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;Register(CodeGenerationConfig&nbsp;config)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;config.AdaptTo("[name]Dto")
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.ForType&lt;WeatherForecast&gt;();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>Advanced model generation</h2>
<!-- /wp:heading -->

<!-- wp:code -->
<pre title="Ignore and change property name." class="wp-block-code"><code lang="csharp" class="language-csharp">public&nbsp;class&nbsp;MapsterConfig&nbsp;:&nbsp;ICodeGenerationRegister
{
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;Register(CodeGenerationConfig&nbsp;config)
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;config.AdaptTo("[name]Dto")
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.ForType&lt;WeatherForecast&gt;(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cfg&nbsp;=&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cfg.Ignore(poco&nbsp;=&gt;&nbsp;poco.TemperatureC);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cfg.Map(poco&nbsp;=&gt;&nbsp;poco.Summary,&nbsp;"MappedSummary");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
&nbsp;&nbsp;&nbsp;&nbsp;}
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The model can be modified by ignoring, renaming, changing the type of the property.   <strong>When you change the property name, you MUST map that property manually.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre title="Map property explicitly." class="wp-block-code"><code lang="csharp" class="language-csharp">TypeAdapterConfig&lt;WeatherForecast,&nbsp;WeatherForecastDto&gt;
&nbsp;&nbsp;&nbsp;&nbsp;.NewConfig()
&nbsp;&nbsp;&nbsp;&nbsp;.Map(dest&nbsp;=&gt;&nbsp;dest.MappedSummary,&nbsp;src&nbsp;=&gt;&nbsp;src.Summary);</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>Type safety</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><code>RequireExplicitMapping</code> will make sure that all mappings should be registered. <code>RequireDestinationMemberSource</code> checks if all destination properties have mappings. <code>.Compile()</code> will perform all checks at compile time and throw exceptions if there are any issues.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre title="Runtime and compile time mapping validation." class="wp-block-code"><code lang="csharp" class="language-csharp">TypeAdapterConfig.GlobalSettings.RequireExplicitMapping&nbsp;=&nbsp;true;
TypeAdapterConfig.GlobalSettings.RequireDestinationMemberSource&nbsp;=&nbsp;true;
TypeAdapterConfig.GlobalSettings.Compile();</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>After map actions</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>AfterMapping extension allows you to execute code after mapping is done and do final modifications to result if needed.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre title="AfterMapping function." class="wp-block-code"><code lang="csharp" class="language-csharp">TypeAdapterConfig&lt;WeatherForecast,&nbsp;WeatherForecastDto&gt;
&nbsp;&nbsp;&nbsp;&nbsp;.NewConfig()
&nbsp;&nbsp;&nbsp;&nbsp;.Map(dest&nbsp;=&gt;&nbsp;dest.MappedSummary,&nbsp;src&nbsp;=&gt;&nbsp;src.Summary)
&nbsp;&nbsp;&nbsp;&nbsp;.AfterMapping((dest,&nbsp;d)&nbsp;=&gt;&nbsp;{&nbsp;d.MappedSummary&nbsp;=&nbsp;"AfterMapping&nbsp;"&nbsp;+&nbsp;d.MappedSummary;&nbsp;});</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>Dependency Injection and async after map actions</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>For dependency injection to work we need to change how mapper is used. Configuration and mapping must be switched from static instances to services. First, we must configure required services by adding singleton for all mapping configurations and scoped mapping service.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre title="Configure Mapster DI" class="wp-block-code"><code lang="csharp" class="language-csharp">public&nbsp;void&nbsp;ConfigureServices(IServiceCollection&nbsp;services)
{
&nbsp;&nbsp;&nbsp;&nbsp;//configure&nbsp;mapster
&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;config&nbsp;=&nbsp;new&nbsp;TypeAdapterConfig();
&nbsp;&nbsp;&nbsp;&nbsp;services.AddSingleton(config);
&nbsp;&nbsp;&nbsp;&nbsp;services.AddScoped&lt;IMapper,&nbsp;ServiceMapper&gt;();

&nbsp;&nbsp;&nbsp;&nbsp;TypeAdapterConfig.GlobalSettings.RequireExplicitMapping&nbsp;=&nbsp;true;
&nbsp;&nbsp;&nbsp;&nbsp;TypeAdapterConfig.GlobalSettings.RequireDestinationMemberSource&nbsp;=&nbsp;true;
&nbsp;&nbsp;&nbsp;&nbsp;TypeAdapterConfig.GlobalSettings.Compile();
&nbsp;&nbsp;&nbsp;&nbsp;//-------
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>For testing purposes, I created three services all of them return time when they were created.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre title="Mapping definitions must be also declared using DI" class="wp-block-code"><code lang="csharp" class="language-csharp">public&nbsp;void&nbsp;Configure(IApplicationBuilder&nbsp;app,&nbsp;IWebHostEnvironment&nbsp;env,&nbsp;TypeAdapterConfig&nbsp;config)
{
&nbsp;&nbsp;&nbsp;&nbsp;//Mapping&nbsp;configurations
&nbsp;&nbsp;&nbsp;&nbsp;config.NewConfig&lt;WeatherForecast,&nbsp;WeatherForecastDto&gt;()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.Map(dest&nbsp;=&gt;&nbsp;dest.MappedSummary,&nbsp;src&nbsp;=&gt;&nbsp;src.Summary)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.AfterMappingAsync(async&nbsp;(dest)&nbsp;=&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Thread.Sleep(1000);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;transient&nbsp;=&nbsp;await&nbsp;MapContext.Current.GetService&lt;TransientService&gt;().DateAsync();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;scoped&nbsp;=&nbsp;await&nbsp;MapContext.Current.GetService&lt;ScopedService&gt;().DateAsync();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;singleton&nbsp;=&nbsp;await&nbsp;MapContext.Current.GetService&lt;SingletonService&gt;().DateAsync();

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dest.MappedSummary&nbsp;=&nbsp;$"{transient},&nbsp;{scoped},&nbsp;{singleton}";
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
&nbsp;&nbsp;&nbsp;&nbsp;//--------</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Mapping function itself also change to async version.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre title="Using IMapper service." class="wp-block-code"><code lang="csharp" class="language-csharp">private&nbsp;readonly&nbsp;IMapper&nbsp;_mapper;

public&nbsp;WeatherForecastController(IMapper&nbsp;mapper)
{
&nbsp;&nbsp;&nbsp;&nbsp;_mapper&nbsp;=&nbsp;mapper;
}

[HttpGet]
public&nbsp;async&nbsp;Task&lt;IEnumerable&lt;WeatherForecastDto&gt;&gt;&nbsp;Get()
{
&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;result&nbsp;=&nbsp;new&nbsp;List&lt;WeatherForecastDto&gt;();

&nbsp;&nbsp;&nbsp;&nbsp;foreach&nbsp;(var&nbsp;forecast&nbsp;in&nbsp;Forecasts())
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result.Add(await&nbsp;_mapper.From(forecast)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.AdaptToTypeAsync&lt;WeatherForecastDto&gt;());
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;result;
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Now that we have all the required services, we can do a simple test. Execute endpoint twice and compare dates to see if service instances were created as expected.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":292,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://floatincode.net/wp-content/uploads/2021/07/image.png" alt="" class="wp-image-292"/><figcaption>First-run results.</figcaption></figure>
<!-- /wp:image -->

<!-- wp:image {"id":293,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://floatincode.net/wp-content/uploads/2021/07/image-1.png" alt="" class="wp-image-293"/><figcaption>Second run results.</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Transient service results change for each temperature value, scoped service time is the same for request and singleton always shows the same date. From this simple test we see that DI and service scope in mapping works as we expect.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Summary</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Mapster brings really great additions to otherwise mundane mapping. Code generation, after map actions, dependency injection are things that more and more often come to mind while working on a large legacy project, and from the initial look, Mapster handles these cases pretty well.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There are still some questions unanswered: how does it handle complex objects? testing I saw in github that some people had issues with concurrency. Code maintainability, since part of logic, would be moved to mapping.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I'm looking forward to using this library in my next project.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>261</wp:post_id>
		<wp:post_date><![CDATA[2021-07-26 05:35:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-07-26 05:35:00]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-07-22 18:24:25]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-07-22 18:24:25]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mapster-generate-dto-async-after-map-actions-dependency-injection]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="net"><![CDATA[.NET]]></category>
		<category domain="post_tag" nicename="c-sharp"><![CDATA[C#]]></category>
		<category domain="post_tag" nicename="code-generation"><![CDATA[code-generation]]></category>
		<category domain="post_tag" nicename="di"><![CDATA[DI]]></category>
		<category domain="post_tag" nicename="mapper"><![CDATA[mapper]]></category>
		<category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[ct_author_last_updated]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Snap to the road: Google vs Mapbox vs Bing]]></title>
		<link>https://floatincode.net/2021/09/20/snap-to-the-road-google-vs-mapbox-vs-bing/</link>
		<pubDate>Mon, 20 Sep 2021 11:34:00 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/?p=360</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Recently did some research about snap-to-road functionality. In this blog post, I will try to share results and compare some edge cases where coordinates are missing or GPS noise is present.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Tech stack: Angular, leaflet with map box map provider.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Red - actual coordinates</li><li>Blue - Mapbox</li><li>Green - Google</li><li>Purple - Bing</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":361,"width":645,"height":736,"sizeSlug":"full","linkDestination":"none"} -->
<figure class="wp-block-image size-full is-resized"><img src="https://floatincode.net/wp-content/uploads/2021/09/image.png" alt="" class="wp-image-361" width="645" height="736"/><figcaption>Bing road interpolation works over longer road periods, but at the same time, it ignores visite to gas stations. Mapbox and Google acknowledge fact that there were few coordinates at the gas station</figcaption></figure>
<!-- /wp:image -->

<!-- wp:image {"id":362,"width":645,"height":558,"sizeSlug":"full","linkDestination":"none"} -->
<figure class="wp-block-image size-full is-resized"><img src="https://floatincode.net/wp-content/uploads/2021/09/image-1.png" alt="" class="wp-image-362" width="645" height="558"/><figcaption>Mapbox, Google, and actual coordinates go as a straight line, however, bing interpolates large distance coordinate jump.</figcaption></figure>
<!-- /wp:image -->

<!-- wp:image {"id":363,"sizeSlug":"full","linkDestination":"none"} -->
<figure class="wp-block-image size-full"><img src="https://floatincode.net/wp-content/uploads/2021/09/image-2.png" alt="" class="wp-image-363"/><figcaption>A strange example of how Google decided to stop interpolation and just draw straight lines for some reason. Bing is the winner for this scenario, perfectly snapped to the road.</figcaption></figure>
<!-- /wp:image -->

<!-- wp:image {"id":364,"width":645,"height":777,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large is-resized"><img src="https://floatincode.net/wp-content/uploads/2021/09/image-3-849x1024.png" alt="" class="wp-image-364" width="645" height="777"/><figcaption>Great example showing different interpolation algorithms between Mapbox and Google. Google makes a corner, while Bing just continues straight.</figcaption></figure>
<!-- /wp:image -->

<!-- wp:image {"id":366,"sizeSlug":"full","linkDestination":"none"} -->
<figure class="wp-block-image size-full"><img src="https://floatincode.net/wp-content/uploads/2021/09/image-4.png" alt="" class="wp-image-366"/><figcaption>Goole tries to make a corner but gives up in the middle.</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Mapbox only provides snap to closest road and this is clearly visible when we compare with Google and Bing snap to the road with interpolation.  </p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Latitude,Longitude or Longitude,Latitude</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>This was a long-lasting question and now I know that there is no correct answer.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p> Latitude,Longitude  - Google, Bing</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p> Longitude,Latitude  - Mapbox</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Final thoughts</h2>
<!-- /wp:heading -->

<!-- wp:table -->
<figure class="wp-block-table"><table><tbody><tr><td></td><td>Google</td><td>MapBox</td><td>Bing</td></tr><tr><td>Price</td><td>10 USD per 1000 requests</td><td>2 USD per 1000 requests<br></td><td>Unable to find, need to contact with exact quote.</td></tr><tr><td>Snap-to-road</td><td>Great</td><td>Doesn't have</td><td>Best</td></tr><tr><td>Road selection</td><td>Tries to make much more turns and include all original points in the route.</td><td>The closest road can be configured with max distance from the point (5-50meters).</td><td>Will try to interpolate a straight road and will ignore some coordinates to do so.</td></tr></tbody></table></figure>
<!-- /wp:table -->

<!-- wp:paragraph -->
<p>It won't be fair to compare accuracy, I'm drawing all roads on MapBox tiles.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Bing will try to keep going straight when interpolating, while Google will wiggle around and try to include all points in the interpolated route. This brings to the main difference, Bing is more likely to remove original points to make a route while Google is more likely to add points in between.  </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There is no winner, this research showed fundamental differences between these providers. Based on the situation all of them are valid options.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>360</wp:post_id>
		<wp:post_date><![CDATA[2021-09-20 11:34:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-09-20 11:34:00]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-09-21 07:33:26]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-09-21 07:33:26]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[snap-to-the-road-google-vs-mapbox-vs-bing]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="bing"><![CDATA[bing]]></category>
		<category domain="post_tag" nicename="google"><![CDATA[google]]></category>
		<category domain="post_tag" nicename="map"><![CDATA[map]]></category>
		<category domain="post_tag" nicename="mapbox"><![CDATA[mapbox]]></category>
		<category domain="post_tag" nicename="research"><![CDATA[research]]></category>
		<category domain="post_tag" nicename="snap-to-road"><![CDATA[snap-to-road]]></category>
		<category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[ct_author_last_updated]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Debugging: Only building docker image extra npm packages are downloaded]]></title>
		<link>https://floatincode.net/2021/10/04/debugging-only-building-docker-image-extra-npm-packages-are-downloaded/</link>
		<pubDate>Mon, 04 Oct 2021 16:05:36 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/?p=372</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>I'm working on the hybrid angular web application. We did update the angular version and released it to our QA environment, everything went fine until we tried to release it to our other QA environment which is using docker. Angular build failed with the following error, indicating that two type definition packages are exporting the same types.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In this blog post, I will walk through the thought process that helped me debug this problem.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Locally on our windows laptop build works fine, azure windows pipelines work fine, but docker builds fail everywhere.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre title="When two type definitions export same types, following error will be thrown on build." class="wp-block-code"><code class="">#12 87.41
#12 87.41 ERROR in node_modules/@types/googlemaps/reference/map.d.ts:1:1 - error TS6200: Definitions of the following identifiers conflict with those in another file: BicyclingLayer, Map, HYBRID, ROADMAP, SATELLITE, TERRAIN, MapTypeRegistry, TrafficLayer, TransitLayer
#12 87.41
#12 87.41 1 declare namespace google.maps {
#12 87.41   ~~~~~~~
#12 87.41
#12 87.41   node_modules/@types/google.maps/index.d.ts:18:1
#12 87.41     18 declare namespace google.maps {</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>From the error above we can see that there are two packages <code> @types/googlemaps </code> and <code> @types/google.maps </code> which provide the same type of definitions.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Thought process</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>We upgraded the angular major version, this resulted in a large portion of our other packages being upgraded as well. The first thought was that some have a new dependency, but this doesn't explain why our windows build agents can build successfully. When building on windows <code> @types/google.maps</code> package is not present in <code>node_modules</code> directory.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>After some searching in the project, installed packages and online, still nothing. The next step that came to my mind is to check the docker file system for this mysterious package. With a few commands, I had docker up and running with the project inside it.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre title="First command will create docker image and second will run that image with interactive console." class="wp-block-code"><code lang="bash" class="language-bash"> docker build . -t ng-debug-build
 
 docker run -it ng-debug-build /bin/ash</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>This showed that docker indeed had  <code> @types/google.maps</code> installed. Can npm packages have dependencies based on the operating system? New google quest was born and search continued. The answer is - no.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Well if we don't have it on windows build, we don't have it in our package.json, it must be installed by someone. Using <code>bisection search</code> on <code>dependencies</code> and <code>devDependencies</code> I was able to find that <code>@typesmarkerclusterer</code> package was installing additional dependencies when building project in docker.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":379,"sizeSlug":"large","linkDestination":"none","className":"is-style-default"} -->
<figure class="wp-block-image size-large is-style-default"><img src="https://floatincode.net/wp-content/uploads/2021/09/image-5-1024x543.png" alt="" class="wp-image-379"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>I'm still not sure why we don't have issues on our windows azure build agent, it might be that we have some sort of cache that I'm not aware of.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The issue was that <code>@types/google-map</code> package changed its dependency. Our angular application has <code>@types/googlemaps</code> but when this package changed its dependence conflicts arose. <code>@types/markerclustererplus</code> has wildcard major version dependency on <code>@types/google-maps</code>, and this situation is a perfect example of why you shouldn't do that!</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Solution</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Since we are using yarn we override internal package versions. We simply rolled back to <code>@types/google-maps</code> version that uses same <code>@types/googlemaps</code> dependency.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre title="Yarn provides a way to override internal package versions" class="wp-block-code"><code lang="javascript" class="language-javascript">    "resolutions": {
        "@types/markerclustererplus/**/@types/google-maps": "3.2.1"
    }</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>This is a perfect example demonstrating how careful you should be about versions that you specify in dependencies. Overall I'm pretty happy with this bug that we had, it led to great examples of bad code, helped me learn new things, such as resolutions, and showed that problem solving has room for improvement, since some steps took a bit longer than anticipated.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>372</wp:post_id>
		<wp:post_date><![CDATA[2021-10-04 16:05:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-10-04 16:05:36]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-10-04 16:05:37]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-10-04 16:05:37]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[debugging-only-building-docker-image-extra-npm-packages-are-downloaded]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="debugging"><![CDATA[debugging]]></category>
		<category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
		<category domain="post_tag" nicename="thought-process"><![CDATA[thought-process]]></category>
		<category domain="post_tag" nicename="witch-hunt"><![CDATA[witch-hunt]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[ct_author_last_updated]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021-10-03]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Custom Styles]]></title>
		<link>https://floatincode.net/2022/03/15/wp-global-styles-author/</link>
		<pubDate>Tue, 15 Mar 2022 15:26:39 +0000</pubDate>
		<dc:creator><![CDATA[Floatas]]></dc:creator>
		<guid isPermaLink="false">https://floatincode.net/2022/03/15/wp-global-styles-author/</guid>
		<description></description>
		<content:encoded><![CDATA[{"version": 2, "isGlobalStylesUserThemeJSON": true }]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>409</wp:post_id>
		<wp:post_date><![CDATA[2022-03-15 15:26:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2022-03-15 15:26:39]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2022-03-15 15:26:39]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2022-03-15 15:26:39]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[wp-global-styles-author]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[wp_global_styles]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="wp_theme" nicename="author"><![CDATA[author]]></category>
						</item>
				</channel>
</rss>
	